[{"description":"The html element represents the root of an HTML document.\nAuthors are encouraged to specify a lang attribute on the root\n html element, giving the document's language. This aids speech synthesis tools to\n determine what pronunciations to use, translation tools to determine what rules to use, and so\n forth.","num":"4.1.1","tag":"html"},{"description":"The head element represents a collection of metadata for the\n Document.","num":"4.2.1","tag":"head"},{"description":"The title element represents the document's title or name. Authors\n should use titles that identify their documents even when they are used out of context, for\n example in a user's history or bookmarks, or in search results. The document's title is often\n different from its first heading, since the first heading does not have to stand alone when taken\n out of context.\nThere must be no more than one title element per document.\nThe text\n attribute's getter must return this title element's child text\n content.\nThe text attribute's setter must string replace\n all with the given value within this title element.\nThe string to use as the document's title is given by the document.title IDL attribute.\nUser agents should use the document's title when referring to the document in their user\n interface. When the contents of a title element are used in this way, the\n directionality of that title element should be used to set the directionality\n of the document's title in the user interface.","num":"4.2.2","tag":"title"},{"description":"The base element allows authors to specify the document base URL for\n the purposes of parsing URLs, and the name of the default\n browsing context for the purposes of following hyperlinks. The element\n does not represent any content beyond this information.\nThere must be no more than one base element per document.\nA base element must have either an href\n attribute, a target attribute, or both.\nThe href content\n attribute, if specified, must contain a valid URL potentially surrounded by\n spaces.\nA base element, if it has an href attribute,\n must come before any other elements in the tree that have attributes defined as taking URLs, except the html element (its manifest attribute isn't affected by base\n elements).\nThe target attribute,\n if specified, must contain a valid browsing context name or keyword, which specifies\n which browsing context is to be used as the default when hyperlinks and forms in the\n Document cause navigation.\nA base element, if it has a target\n attribute, must come before any elements in the tree that represent hyperlinks.\nTo get an element's target, given an a, area, or\n form element element, run these steps:\n \n \nIf element has a target attribute, then return that\n attribute's value.If element's node document contains a base element\n with a target attribute, then return the value of the\n target attribute of the first such base\n element.Return the empty string.\nA base element that is the first base element with an href content attribute in a document tree has a\n frozen base URL. The frozen base URL must be immediately\n set for an element whenever any of the following\n situations occur:\nThe base element becomes the first base element in tree\n order with an href content attribute in its\n Document.The base element is the first base element in tree\n order with an href content attribute in its\n Document, and its href content attribute is\n changed.\nTo set the frozen base URL for an element element:\nLet document be element's node document.\n \n Let urlRecord be the result of parsing the\n value of element's href content attribute with\n document's fallback base URL, and document's character encoding. (Thus, the base\n element isn't affected by itself.)Set element's frozen base URL to document's\n fallback base URL, if urlRecord is failure or running Is base\n allowed for Document? on the resulting URL record and document\n returns \"Blocked\", and to urlRecord otherwise.\nThe href IDL\n attribute, on getting, must return the result of running the following algorithm:\n \n \n \nLet document be element's node document.\n \n Let url be the value of the href\n attribute of this element, if it has one, and the empty string otherwise.Let urlRecord be the result of parsing\n url with document's fallback base URL, and\n document's character encoding.\n (Thus, the base element isn't affected by other base elements or\n itself.)If urlRecord is failure, return url.Return the serialization of\n urlRecord.\nThe href IDL attribute, on setting, must set the href content attribute to the given new value.\nThe target IDL\n attribute must reflect the content attribute of the same name.","num":"4.2.3","tag":"base"},{"description":"The link element allows authors to link their document to other resources.\nThe address of the link(s) is given by the href attribute. If the href attribute is present, then its value must be a valid\n non-empty URL potentially surrounded by spaces. One or both of the href or imagesrcset\n attributes must be present.\nIf both the href and imagesrcset attributes are absent, then the element does not\n define a link.\nThe types of link indicated (the relationships) are given by the value of the rel attribute, which, if present, must have a\n value that is a unordered set of unique space-separated tokens. The allowed keywords and their meanings are defined in a later section. If the rel attribute is absent, has no keywords, or if\n none of the keywords used are allowed according to the definitions in this specification, then the\n element does not create any links.\nrel's\n supported tokens are the keywords defined in\n HTML link types which are allowed on link elements, impact\n the processing model, and are supported by the user agent. The possible supported tokens are\n alternate,\n dns-prefetch,\n icon,\n manifest,\n modulepreload,\n next,\n pingback,\n preconnect,\n prefetch,\n preload,\n prerender,\n search, and\n stylesheet.\n rel's supported\n tokens must only include the tokens from this list that the user agent implements the\n processing model for.\nA link element must have either a rel\n attribute or an itemprop attribute, but not both.\nIf a link element has an itemprop attribute,\n or has a rel attribute that contains only keywords that are\n body-ok, then the element is said to be allowed in the body. This means\n that the element can be used where phrasing content is expected.\nTwo categories of links can be created using the link element: links to external resources and hyperlinks. The link types section defines\n whether a particular link type is an external resource or a hyperlink. One link\n element can create multiple links (of which some might be external resource links and some might be hyperlinks); exactly which and how many links are created depends on the\n keywords given in the rel attribute. User agents must process\n the links on a per-link basis, not a per-element basis.\nHyperlinks created with the link element and its\n rel attribute apply to the whole document. This contrasts with\n the rel attribute of a and area\n elements, which indicates the type of a link whose context is given by the link's location within\n the document.\nUnlike those created by a and area elements, hyperlinks created by link elements are not displayed as\n part of the document by default, in user agents that support the suggested\n default rendering. And even if they are force-displayed using CSS, they have no\n activation behavior. Instead, they primarily provide semantic information which might\n be used by the page or by other software that consumes the page's contents. Additionally, the user\n agent can provide\n its own UI for following such hyperlinks.\nThe exact behavior for links to external resources\n depends on the exact relationship, as defined for the relevant link\n type.\nThe crossorigin\n attribute is a CORS settings attribute. It is intended for use with external resource links.\nThe media attribute\n says which media the resource applies to. The value must be a valid media query\n list.\nThe integrity\n attribute represents the integrity\n metadata for requests which this element is responsible for. The value is text. The\n attribute must only be specified on link elements that have a rel attribute that contains the stylesheet, preload, or modulepreload keyword. [SRI]\nThe hreflang\n attribute on the link element has the same semantics as the hreflang attribute on the a\n element.\nThe type attribute\n gives the MIME type of the linked resource. It is purely advisory. The value must be\n a valid MIME type string.\nFor external resource links, the type attribute is used as a hint to user agents so that they can\n avoid fetching resources they do not support.\nThe referrerpolicy attribute is a referrer policy\n attribute. It is intended for use with external\n resource links, where it helps set the referrer policy used when fetching and processing the linked resource.\n [REFERRERPOLICY].\nThe title attribute\n gives the title of the link. With one exception, it is purely advisory. The value is text. The\n exception is for style sheet links that are in a document tree, for which the title attribute defines CSS\n style sheet sets.\nThe imagesrcset\n attribute may be present, and is a srcset attribute.\nThe imagesrcset and href attributes (if width\n descriptors are not used) together contribute the image\n sources to the source set.\nIf the imagesrcset attribute is present and has any\n image candidate strings using a width\n descriptor, the imagesizes attribute must also be present, and is a\n sizes attribute. The imagesizes attribute\n contributes the source size to the source set.\nThe imagesrcset and imagesizes attributes must only be specified on\n link elements that have both a rel attribute that\n specifies the preload keyword, as well as an as attribute in the \"image\" state.\nThe sizes attribute\n gives the sizes of icons for visual media. Its value, if present, is merely advisory. User agents may use the value to decide which icon(s) to use if multiple icons are\n available. If specified, the attribute must have a value that is an unordered set of\n unique space-separated tokens which are ASCII case-insensitive. Each value\n must be either an ASCII case-insensitive match for the string \"any\", or a value that consists of two valid non-negative integers that do not have a leading U+0030 DIGIT\n ZERO (0) character and that are separated by a single U+0078 LATIN SMALL LETTER X or U+0058 LATIN\n CAPITAL LETTER X character. The attribute must only be specified on link elements\n that have a rel attribute that specifies the icon keyword or the apple-touch-icon keyword.\nThe as attribute\n specifies the potential destination for a\n preload request for the resource given by the href attribute.\n It is an enumerated attribute. Each potential destination is a keyword for this\n attribute, mapping to a state of the same name. The attribute must be specified on\n link elements that have a rel attribute that\n contains the preload keyword. It may be specified on\n link elements that have a rel attribute that\n contains the modulepreload keyword; in such cases it must\n have a value which is a script-like\n destination. For other link elements, it must not be specified.\nThe processing model for how the as attribute is\n used is given in an individual link type's fetch and process the linked resource\n algorithm.\nThe blocking\n attribute is a blocking attribute. It is used by link types modulepreload, preload and\n stylesheet, and it must only be specified on link elements\n that have a rel attribute containing one of those\n keywords.\nThe color attribute is\n used with the mask-icon link type. The attribute must only be specified on\n link elements that have a rel attribute that\n contains the mask-icon keyword. The value must be a string that matches the\n CSS production, defining a suggested color that user agents can use to\n customize the display of the icon that the user sees when they pin your site.\nlink elements have an associated explicitly enabled boolean. It is\n initially false.\n \n \nThe disabled\n attribute is a boolean attribute that is used with the stylesheet link type. The attribute must only be specified on\n link elements that have a rel attribute that\n contains the stylesheet keyword.\nWhenever the disabled attribute is removed, set the\n link element's explicitly enabled attribute to true.\nThe IDL attributes\n href,\n hreflang,\n integrity,\n media,\n rel,\n sizes,\n type,\n blocking and\n disabled\n each must reflect the respective content attributes of the same name.\nThe as IDL\n attribute must reflect the as content attribute,\n limited to only known values.\nThe crossOrigin IDL attribute must reflect the\n crossorigin content attribute, limited to only\n known values.\nThe referrerPolicy IDL attribute must\n reflect the referrerpolicy content\n attribute, limited to only known values.\nThe imageSrcset IDL attribute must reflect the\n imagesrcset content attribute.\nThe imageSizes IDL attribute must reflect the\n imagesizes content attribute.\nThe relList\n IDL attribute must reflect the rel content attribute.","num":"4.2.4","tag":"link"},{"description":"The meta element represents various kinds of metadata that cannot be\n expressed using the title, base, link, style,\n and script elements.\nThe meta element can represent document-level metadata with the name attribute, pragma directives with the http-equiv attribute, and the file's character encoding\n declaration when an HTML document is serialized to string form (e.g. for transmission over\n the network or for disk storage) with the charset\n attribute.\nExactly one of the name, http-equiv, charset,\n and itemprop attributes must be specified.\nIf either name, http-equiv, or itemprop is\n specified, then the content attribute must also be\n specified. Otherwise, it must be omitted.\nThe charset\n attribute specifies the character encoding used by the document.\n This is a character encoding declaration. If the attribute is present, its value must\n be an ASCII case-insensitive match for the string \"utf-8\".\nThere must not be more than one meta element with a charset attribute per document.\nThe content\n attribute gives the value of the document metadata or pragma directive when the element is used\n for those purposes. The allowed values depend on the exact context, as described in subsequent\n sections of this specification.\nIf a meta element has a name attribute, it sets document metadata. Document metadata\n is expressed in terms of name-value pairs, the name attribute\n on the meta element giving the name, and the content attribute on the same element giving the value. The name\n specifies what aspect of metadata is being set; valid names and the meaning of their values are\n described in the following sections. If a meta element has no content attribute, then the value part of the metadata\n name-value pair is the empty string.\nThe media attribute\n says which media the metadata applies to. The value must be a valid media query list.\n Unless the name is theme-color, the media\n attribute has no effect on the processing model and must not be used by authors.\nThe name, content, and media IDL attributes\n must reflect the respective content attributes of the same name. The IDL attribute\n httpEquiv must\n reflect the content attribute http-equiv.","num":"4.2.5","tag":"meta"},{"description":"The style element allows authors to embed CSS style sheets in their documents.\n The style element is one of several inputs to the styling processing\n model. The element does not represent content for the\n user.\nThe disabled getter steps are:\nIf this does not have an associated CSS style sheet, return\n false.If this's associated CSS style sheet's disabled flag is set, return true.Return false.\nThe disabled setter steps are:\nIf this does not have an associated CSS style sheet,\n return.If the given value is true, set this's associated CSS style\n sheet's disabled flag.\n Otherwise, unset this's associated CSS style sheet's disabled flag.\nThe media attribute\n says which media the styles apply to. The value must be a valid media query list.\n The user agent must apply the styles when the media attribute's value matches the environment and\n the other relevant conditions apply, and must not apply them otherwise.\nThe default, if the media\n attribute is omitted, is \"all\", meaning that by default styles apply to all\n media.\nThe blocking\n attribute is a blocking attribute.\nThe title attribute on style elements defines\n CSS style sheet sets. If the style element\n has no title attribute, then it has no title; the title attribute of ancestors does not apply to the style\n element. If the style element is not in a document tree, then the title attribute is ignored. [CSSOM]\nThe child text content of a style element must be that of a\n conformant style sheet.\nA style element is implicitly potentially render-blocking if the\n element was created by its node document's parser.\nThe user agent must run the update a style block algorithm whenever\n one of the following conditions occur:\nThe element is popped off the stack of open elements of an HTML\n parser or XML parser.The element is not on the stack of open elements of an HTML\n parser or XML parser, and it becomes connected or disconnected.The element's children changed steps run.\nThe update a style block algorithm is as follows:\nLet element be the style element.If element has an associated CSS style sheet, remove the CSS style sheet in question.If element is not connected, then return.\n If element's type attribute is present and\n its value is neither the empty string nor an ASCII case-insensitive match for\n \"text/css\", then return.\n \n \n If the Should element's inline behavior be blocked by Content Security\n Policy? algorithm returns \"Blocked\" when executed upon the\n style element, \"style\", and the style\n element's child text content, then return. [CSP]\n Create a CSS style sheet with the following properties:\n \n typetext/cssowner nodeelementmedia\n The media attribute of element.\n \n \n title\n The title attribute of element, if\n element is in a document tree, or the empty string otherwise.\n \n \n alternate flagUnset.origin-clean flagSet.locationparent CSS style sheetowner CSS rulenulldisabled flagLeft at its default value.CSS rules\n Left uninitialized.\n \n This doesn't seem right. Presumably we should be using the element's\n child text content? Tracked as issue #2997.\n \n \n \n If element contributes a script-blocking style sheet, increment\n element's node document's script-blocking style sheet\n counter by 1.If element's media attribute's value\n matches the environment and element is\n potentially render-blocking, then block rendering on\n element.\nOnce the attempts to obtain the style sheet's critical subresources, if any, are\n complete, or, if the style sheet has no critical subresources, once the style sheet\n has been parsed and processed, the user agent must run these steps:\nFetching the critical subresources is not well-defined; probably issue #968 is the best resolution for that.\n In the meantime, any critical subresource request should have its render-blocking set to whether or not the\n style element is currently render-blocking.\nLet element be the style element associated with the style sheet\n in question.Let success be true.\n If the attempts to obtain any of the style sheet's critical subresources failed\n for any reason (e.g., DNS error, HTTP 404 response, a connection being prematurely closed,\n unsupported Content-Type), set success to false.\n \n \n \n Queue an element task on the networking task source given\n element and the following steps:\n \n If success is true, fire an event\n named load at element.Otherwise, fire an event named error at element.\n If element contributes a script-blocking style sheet:\n \n Assert: element's node document's script-blocking style\n sheet counter is greater than 0.Decrement element's node document's script-blocking\n style sheet counter by 1.\n Unblock rendering on element.\n \nThe element must delay the load event of the element's node document until all the\n attempts to obtain the style sheet's critical subresources, if any, are complete.\nThe media and\n blocking IDL\n attributes must each reflect the respective content attributes of the same name.\nThe LinkStyle interface is also implemented by this element. [CSSOM]","num":"4.2.6","tag":"style"},{"description":"The body element represents the contents of the document.\nIn conforming documents, there is only one body element. The document.body IDL attribute provides scripts with easy access to\n a document's body element.\nThe body element exposes as event handler content attributes a number\n of the event handlers of the Window object. It also mirrors their\n event handler IDL attributes.\nThe event handlers of the Window object named by the\n Window-reflecting body element event handler set, exposed on the\n body element, replace the generic event handlers with the same names\n normally supported by HTML elements.\nThus, for example, a bubbling error event\n dispatched on a child of the body element of a Document would first\n trigger the onerror event handler content\n attributes of that element, then that of the root html element, and only\n then would it trigger the onerror event handler content attribute on the\n body element. This is because the event would bubble from the target, to the\n body, to the html, to the Document, to the\n Window, and the event handler on the\n body is watching the Window not the body. A regular event\n listener attached to the body using addEventListener(),\n however, would be run when the event bubbled through the body and not when it reaches\n the Window object.","num":"4.3.1","tag":"body"},{"description":"The article element represents a complete, or self-contained,\n composition in a document, page, application, or site and that is, in principle, independently\n distributable or reusable, e.g. in syndication. This could be a forum post, a magazine or\n newspaper article, a blog entry, a user-submitted comment, an interactive widget or gadget, or any\n other independent item of content.\nWhen article elements are nested, the inner article elements\n represent articles that are in principle related to the contents of the outer article. For\n instance, a blog entry on a site that accepts user-submitted comments could represent the comments\n as article elements nested within the article element for the blog\n entry.\nAuthor information associated with an article element (q.v. the\n address element) does not apply to nested article elements.\nWhen the main content of the page (i.e. excluding footers, headers, navigation blocks, and\n sidebars) is all one single self-contained composition, that content may be marked with an\n article, but it is technically redundant in that case (since it's self-evident that\n the page is a single composition, as it is a single document).","num":"4.3.2","tag":"article"},{"description":"The section element represents a generic section of a document or\n application. A section, in this context, is a thematic grouping of content, typically with a\n heading.\nExamples of sections would be chapters, the various tabbed pages in a tabbed\n dialog box, or the numbered sections of a thesis. A web site's home page could be split into\n sections for an introduction, news items, and contact information.","num":"4.3.3","tag":"section"},{"description":"The nav element represents a section of a page that links to other\n pages or to parts within the page: a section with navigation links.","num":"4.3.4","tag":"nav"},{"description":"The aside element represents a section of a page that consists of\n content that is tangentially related to the content around the aside element, and\n which could be considered separate from that content. Such sections are often represented as\n sidebars in printed typography.\nThe element can be used for typographical effects like pull quotes or sidebars, for\n advertising, for groups of nav elements, and for other content that is considered\n separate from the main content of the page.","num":"4.3.5","tag":"aside"},{"description":"The hgroup element represents a heading and related content. The\n element may be used to group an h1–h6 element with one or more\n p elements containing content representing a subheading, alternative title, or\n tagline.","num":"4.3.7","tag":"hgroup"},{"description":"The header element represents a group of introductory or navigational\n aids.","num":"4.3.8","tag":"header"},{"description":"The footer element represents a footer for its nearest ancestor\n sectioning content element, or for the body element if there is no such\n ancestor. A footer typically contains information about its section such as who wrote it, links\n to related documents, copyright data, and the like.\nWhen the footer element contains entire sections, they represent appendices, indices, long colophons, verbose license\n agreements, and other such content.\nFooters don't necessarily have to appear at the end of a section, though they usually\n do.\nWhen there is no ancestor sectioning content element, then it applies to the whole\n page.","num":"4.3.9","tag":"footer"},{"description":"The address element represents the contact information for its\n nearest article or body element ancestor. If that is the body\n element, then the contact information applies to the document as a whole.\nThe address element must not be used to represent arbitrary addresses (e.g. postal\n addresses), unless those addresses are in fact the relevant contact information. (The\n p element is the appropriate element for marking up postal addresses in general.)\nThe address element must not contain information other than contact\n information.\nTypically, the address element would be included along with other information in a\n footer element.\nThe contact information for a node node is a collection of\n address elements defined by the first applicable entry from the following list:\nIf node is an article elementIf node is a body element\n The contact information consists of all the address elements that have node as an ancestor and do not have another body or\n article element ancestor that is a descendant of node.\n If node has an ancestor element that is an article elementIf node has an ancestor element that is a body element\n The contact information of node is the same as the contact information of\n the nearest article or body element ancestor, whichever is\n nearest.\n If node's node document has a body\n element\n The contact information of node is the same as the contact information of\n the body element of the Document.\n Otherwise\n There is no contact information for node.\n \nUser agents may expose the contact information of a node to the user, or use it for other\n purposes, such as indexing sections based on the sections' contact information.","num":"4.3.10","tag":"address"},{"description":"The p element represents a paragraph.\nThe p element should not be used when a more specific element is more\n appropriate.\n\n \n List elements (in particular, ol and ul elements) cannot be children\n of p elements. When a sentence contains a bulleted list, therefore, one might wonder\n how it should be marked up.\n \n \n \n The solution is to realize that a paragraph, in HTML terms, is not a\n logical concept, but a structural one. In the fantastic example above, there are actually\n five paragraphs as defined by this specification: one\n before the list, one for each bullet, and one after the list.\n \n \n \n Authors wishing to conveniently style such \"logical\" paragraphs consisting of multiple\n \"structural\" paragraphs can use the div element instead of the p\n element.\n \n \n \n ","num":"4.4.1","tag":"p"},{"description":"The hr element represents a paragraph-level thematic\n break, e.g. a scene change in a story, or a transition to another topic within a section of a\n reference book.","num":"4.4.2","tag":"hr"},{"description":"The pre element represents a block of preformatted text, in which\n structure is represented by typographic conventions rather than by elements.\nSome examples of cases where the pre element could be used:\nIncluding an email, with paragraphs indicated by blank lines, lists indicated by lines\n prefixed with a bullet, and so on.Including fragments of computer code, with structure indicated according to the conventions\n of that language.Displaying ASCII art.\nTo represent a block of computer code, the pre element can be used with a\n code element; to represent a block of computer output the pre element\n can be used with a samp element. Similarly, the kbd element can be used\n within a pre element to indicate text that the user is to enter.","num":"4.4.3","tag":"pre"},{"description":"The blockquote element represents a section that is quoted from\n another source.\nContent inside a blockquote must be quoted from another source, whose address, if\n it has one, may be cited in the cite attribute.\nIf the cite attribute is present, it must be a\n valid URL potentially surrounded by spaces. To obtain the\n corresponding citation link, the value of the attribute must be parsed relative to the element's node document. User agents may\n allow users to follow such citation links, but they are primarily intended for private use (e.g.,\n by server-side scripts collecting statistics about a site's use of quotations), not for\n readers.\nThe content of a blockquote may be abbreviated or may have context added in the\n conventional manner for the text's language.\nAttribution for the quotation, if any, must be placed outside the blockquote\n element.\nThe cite IDL\n attribute must reflect the element's cite content\n attribute.","num":"4.4.4","tag":"blockquote"},{"description":"The ol element represents a list of items, where the items have been\n intentionally ordered, such that changing the order would change the meaning of the document.\nThe items of the list are the li element child nodes of the ol\n element, in tree order.\nThe reversed attribute\n is a boolean attribute. If present, it indicates that the list is a descending list\n (..., 3, 2, 1). If the attribute is omitted, the list is an ascending list (1, 2, 3, ...).\nThe start attribute, if\n present, must be a valid integer. It is used to determine the starting value of the list.\nAn ol element has a starting value, which is\n an integer determined as follows:\n\n If the ol element has a start attribute,\n then:\n \n Let parsed be the result of parsing\n the value of the attribute as an integer.If parsed is not an error, then return parsed.\n If the ol element has a reversed\n attribute, then return the number of owned li\n elements.Return 1.\nThe type attribute can be\n used to specify the kind of marker to use in the list, in the cases where that matters (e.g.\n because items are to be referenced by their number/letter). The attribute, if\n specified, must have a value that is identical to one of the characters given in the\n first cell of one of the rows of the following table. The type attribute represents the state given in the cell in the second\n column of the row whose first cell matches the attribute's value; if none of the cells match, or\n if the attribute is omitted, then the attribute represents the decimal state.\nKeyword\n State\n Description\n Examples for values 1-3 and 3999-4001\n 1\n (U+0031)\n decimal\n Decimal numbers\n 1. 2. 3. ... 3999. 4000. 4001. ...\n a (U+0061)\n lower-alpha\n Lowercase latin alphabet\n a. b. c. ... ewu. ewv. eww. ...\n A (U+0041)\n upper-alpha\n Uppercase latin alphabet\n A. B. C. ... EWU. EWV. EWW. ...\n i (U+0069)\n \n lower-roman\n Lowercase roman numerals\n i. ii. iii. ... mmmcmxcix. i̅v̅. i̅v̅i. ...\n I (U+0049)\n upper-roman\n Uppercase roman numerals\n I. II. III. ... MMMCMXCIX. I̅V̅. I̅V̅I. ...\n \nUser agents should render the items of the list in a manner consistent with the state of the\n type attribute of the ol element. Numbers less than\n or equal to zero should always use the decimal system regardless of the type attribute.\nThe reversed\n and type IDL\n attributes must reflect the respective content attributes of the same name.\nThe start IDL\n attribute must reflect the content attribute of the same name, with a default value\n of 1.","num":"4.4.5","tag":"ol"},{"description":"The ul element represents a list of items, where the order of the\n items is not important — that is, where changing the order would not materially change the\n meaning of the document.\nThe items of the list are the li element child nodes of the ul\n element.","num":"4.4.6","tag":"ul"},{"description":"The menu element represents a toolbar consisting of its contents, in\n the form of an unordered list of items (represented by li elements), each of\n which represents a command that the user can perform or activate.","num":"4.4.7","tag":"menu"},{"description":"The li element represents a list item. If its parent element is an\n ol, ul, or menu element, then the element is an item of the\n parent element's list, as defined for those elements. Otherwise, the list item has no defined\n list-related relationship to any other li element.\nThe value attribute, if\n present, must be a valid integer. It is used to determine the ordinal\n value of the list item, when the li's list owner is an\n ol element.\nAny element whose computed value of 'display' is 'list-item' has a\n list owner, which is determined as follows:\nIf the element is not being rendered, return null; the element has no\n list owner.\n \n Let ancestor be the element's parent.If the element has an ol, ul, or menu ancestor, set\n ancestor to the closest such ancestor element.\n Return the closest inclusive ancestor of ancestor that produces a CSS\n box.\n \n \n \nTo determine the ordinal value of each element owned by a given list\n owner owner, perform the following steps:\nLet i be 1.If owner is an ol element, let numbering be\n owner's starting value. Otherwise, let\n numbering be 1.Loop: If i is greater than the number of list items that owner owns, then return; all\n of owner's owned list items have been assigned ordinal values.Let item be the ith of owner's owned list items, in tree order.\n \n \n If item is an li element that has a value attribute, then:\n \n Let parsed be the result of parsing\n the value of the attribute as an integer.If parsed is not an error, then set numbering to\n parsed.\n The ordinal value of item is numbering.If owner is an ol element, and owner has a reversed attribute, decrement numbering by 1;\n otherwise, increment numbering by 1.Increment i by 1.Go to the step labeled loop.\n \nThe value IDL\n attribute must reflect the value of the value\n content attribute.","num":"4.4.8","tag":"li"},{"description":"The dl element represents an association list consisting of zero or\n more name-value groups (a description list). A name-value group consists of one or more names\n (dt elements, possibly as children of a div element child) followed by\n one or more values (dd elements, possibly as children of a div element\n child), ignoring any nodes other than dt and dd element children, and\n dt and dd elements that are children of div element\n children. Within a single dl element, there should not be more than one\n dt element for each name.\nName-value groups may be terms and definitions, metadata topics and values, questions and\n answers, or any other groups of name-value data.\nThe values within a group are alternatives; multiple paragraphs forming part of the same value\n must all be given within the same dd element.\nThe order of the list of groups, and of the names and values within each group, may be\n significant.\nIn order to annotate groups with microdata attributes, or other global\n attributes that apply to whole groups, or just for styling purposes, each group in a\n dl element can be wrapped in a div element. This does not change the\n semantics of the dl element.\nThe name-value groups of a dl element dl are determined using the\n following algorithm. A name-value group has a name (a list of dt elements, initially\n empty) and a value (a list of dd elements, initially empty).\nLet groups be an empty list of name-value groups.Let current be a new name-value group.Let seenDd be false.Let child be dl's first child.Let grandchild be null.\n While child is not null:\n \n \n If child is a div element, then:\n \n Let grandchild be child's first child.\n While grandchild is not null:\n \n Process dt or dd for\n grandchild.Set grandchild to grandchild's next\n sibling.\n \n Otherwise, process dt or dd for\n child.Set child to child's next sibling.\n If current is not empty, then append current to\n groups.Return groups.\nTo process dt or dd for a node node means to\n follow these steps:\nLet groups, current, and seenDd be the same variables as\n those of the same name in the algorithm that invoked these steps.\n If node is a dt element, then:\n \n If seenDd is true, then append current to groups, set\n current to a new name-value group, and set seenDd to false.Append node to current's name.\n Otherwise, if node is a dd element, then append node to\n current's value and set seenDd to true.","num":"4.4.9","tag":"dl"},{"description":"The dt element represents the term, or name, part of a\n term-description group in a description list (dl element).","num":"4.4.10","tag":"dt"},{"description":"The dd element represents the description, definition, or value, part\n of a term-description group in a description list (dl element).","num":"4.4.11","tag":"dd"},{"description":"The figure element represents some flow content,\n optionally with a caption, that is self-contained (like a complete sentence) and is typically\n referenced as a single unit from the main flow of the document.\nThe element can thus be used to annotate illustrations, diagrams, photos, code listings,\n etc.\n\n When a figure is referred to from the main content of the document by identifying\n it by its caption (e.g., by figure number), it enables such content to be easily moved away from\n that primary content, e.g., to the side of the page, to dedicated pages, or to an appendix,\n without affecting the flow of the document.\n \n If a figure element is referenced by its relative position, e.g.,\n \"in the photograph above\" or \"as the next figure shows\", then moving the figure would disrupt the\n page's meaning. Authors are encouraged to consider using labels to refer to figures, rather than\n using such relative references, so that the page can easily be restyled without affecting the\n page's meaning.\n \nThe first figcaption element child of the element, if any,\n represents the caption of the figure element's contents. If there is no child\n figcaption element, then there is no caption.\nA figure element's contents are part of the surrounding flow. If the purpose of\n the page is to display the figure, for example a photograph on an image sharing site, the\n figure and figcaption elements can be used to explicitly provide a\n caption for that figure. For content that is only tangentially related, or that serves a separate\n purpose than the surrounding flow, the aside element should be used (and can itself\n wrap a figure). For example, a pull quote that repeats content from an\n article would be more appropriate in an aside than in a\n figure, because it isn't part of the content, it's a repetition of the content for\n the purposes of enticing readers or highlighting key topics.","num":"4.4.12","tag":"figure"},{"description":"The figcaption element represents a caption or legend for the rest of\n the contents of the figcaption element's parent figure element, if any.","num":"4.4.13","tag":"figcaption"},{"description":"The main element represents the dominant contents of the\n document.\nA document must not have more than one main element that does not have the hidden attribute specified.\nA hierarchically correct main element is one whose ancestor elements\n are limited to html, body, div, form without\n an accessible name, and autonomous custom elements. Each main element must be a\n hierarchically correct main element.","num":"4.4.14","tag":"main"},{"description":"The div element has no special meaning at all. It represents its\n children. It can be used with the class, lang, and title attributes to mark up\n semantics common to a group of consecutive elements. It can also be used in a dl\n element, wrapping groups of dt and dd elements.","num":"4.4.15","tag":"div"},{"description":"If the a element has an href attribute,\n then it represents a hyperlink (a hypertext anchor) labeled by its\n contents.\nIf the a element has no href attribute,\n then the element represents a placeholder for where a link might otherwise have been\n placed, if it had been relevant, consisting of just the element's contents.\nThe target, download, ping,\n rel, hreflang, type,\n and referrerpolicy attributes must be omitted\n if the href attribute is not present.\nIf the itemprop attribute is specified on an a element,\n then the href attribute must also be specified.\nThe href, target, download, ping,\n and referrerpolicy attributes affect what\n happens when users follow hyperlinks or download hyperlinks created using the a\n element. The rel, hreflang, and type\n attributes may be used to indicate to the user the likely nature of the target resource before the\n user follows the link.\nThe activation behavior of an a element element given an\n event event is:\nIf element has no href attribute,\n then return.Let hyperlinkSuffix be null.If event's target is an\n img with an ismap attribute specified,\n then:\n \n Let x and y be 0.If event's isTrusted attribute is\n initialized to true, then set x to the distance in CSS\n pixels from the left edge of the image to the location of the click, and set\n y to the distance in CSS pixels from the top edge of the\n image to the location of the click.If x is negative, set x to 0.If y is negative, set y to 0.Set hyperlinkSuffix to the concatenation of U+003F (?), the value of\n x expressed as a base-ten integer using ASCII digits, U+002C (,), and\n the value of y expressed as a base-ten integer using ASCII\n digits.\n If element has a download\n attribute, or if the user has expressed a preference to download the hyperlink, then download the hyperlink created by element given\n hyperlinkSuffix.Otherwise, follow the hyperlink created by\n element given hyperlinkSuffix.\nThe IDL attributes download, ping, target, rel, hreflang, and type, must reflect the respective content attributes\n of the same name.\nThe IDL attribute relList must reflect the rel content attribute.\nThe IDL attribute referrerPolicy must reflect the referrerpolicy content attribute, limited to\n only known values.\nThe text\n attribute's getter must return this element's descendant text content.\nThe text attribute's setter must string replace\n all with the given value within this element.","num":"4.5.1","tag":"a"},{"description":"The em element represents stress emphasis of its contents.\nThe level of stress that a particular piece of content has is given by its number of ancestor\n em elements.\nThe placement of stress emphasis changes the meaning of the sentence. The element thus forms an\n integral part of the content. The precise way in which stress is used in this way depends on the\n language.\n\n \n The em element isn't a generic \"italics\" element. Sometimes, text is intended to\n stand out from the rest of the paragraph, as if it was in a different mood or voice. For this,\n the i element is more appropriate.\n \n The em element also isn't intended to convey importance; for that purpose, the\n strong element is more appropriate.\n \n \n \n ","num":"4.5.2","tag":"em"},{"description":"The strong element represents strong importance, seriousness, or\n urgency for its contents.\nImportance: the strong element can be used in a heading, caption,\n or paragraph to distinguish the part that really matters from other parts that might be more\n detailed, more jovial, or merely boilerplate. (This is distinct from marking up subheadings, for\n which the hgroup element is appropriate.)\nFor example, the first word of the previous paragraph is marked up with\n strong to distinguish it from the more detailed text in the rest of the\n paragraph.\nSeriousness: the strong element can be used to mark up a warning\n or caution notice.\nUrgency: the strong element can be used to denote contents that\n the user needs to see sooner than other parts of the document.\nThe relative level of importance of a piece of content is given by its number of ancestor\n strong elements; each strong element increases the importance of its\n contents.\nChanging the importance of a piece of text with the strong element does not change\n the meaning of the sentence.","num":"4.5.3","tag":"strong"},{"description":"The small element represents side comments such as small print.\nThe small element should not be used for extended spans of text, such as multiple\n paragraphs, lists, or sections of text. It is only intended for short runs of text. The text of a\n page listing terms of use, for instance, would not be a suitable candidate for the\n small element: in such a case, the text is not a side comment, it is the main content\n of the page.\nThe small element must not be used for subheadings; for that purpose, use the\n hgroup element.","num":"4.5.4","tag":"small"},{"description":"The s element represents contents that are no longer accurate or no\n longer relevant.","num":"4.5.5","tag":"s"},{"description":"The cite element represents the title of a work (e.g.\n a book,\n a paper,\n an essay,\n a poem,\n a score,\n a song,\n a script,\n a film,\n a TV show,\n a game,\n a sculpture,\n a painting,\n a theatre production,\n a play,\n an opera,\n a musical,\n an exhibition,\n a legal case report,\n a computer program, \n etc.). This can be a work that is being quoted or referenced in detail (i.e., a\n citation), or it can just be a work that is mentioned in passing.\nA person's name is not the title of a work — even if people call that person a piece of\n work — and the element must therefore not be used to mark up people's names. (In some cases,\n the b element might be appropriate for names; e.g. in a gossip article where the\n names of famous people are keywords rendered with a different style to draw attention to them. In\n other cases, if an element is really needed, the span element can be\n used.)","num":"4.5.6","tag":"cite"},{"description":"The q element represents some phrasing\n content quoted from another source.\nQuotation punctuation (such as quotation marks) that is quoting the contents of the element\n must not appear immediately before, after, or inside q elements; they will be\n inserted into the rendering by the user agent.\nContent inside a q element must be quoted from another source, whose address, if\n it has one, may be cited in the cite attribute. The source may be fictional, as when quoting\n characters in a novel or screenplay.\nIf the cite attribute is present, it must be a valid\n URL potentially surrounded by spaces. To obtain the corresponding citation\n link, the value of the attribute must be parsed relative to the\n element's node document. User agents may allow users to follow such citation\n links, but they are primarily intended for private use (e.g., by server-side scripts collecting\n statistics about a site's use of quotations), not for readers.\nThe q element must not be used in place of quotation marks that do not represent\n quotes; for example, it is inappropriate to use the q element for marking up\n sarcastic statements.\nThe use of q elements to mark up quotations is entirely optional; using explicit\n quotation punctuation without q elements is just as correct.","num":"4.5.7","tag":"q"},{"description":"The dfn element represents the defining instance of a term. The paragraph, description list group, or section that is the nearest ancestor of the dfn\n element must also contain the definition(s) for the term given\n by the dfn element.\nDefining term: if the dfn element has a title attribute, then the exact value of that\n attribute is the term being defined. Otherwise, if it contains exactly one element child node and\n no child Text nodes, and that child element is an abbr element with a\n title attribute, then the exact value of that\n attribute is the term being defined. Otherwise, it is the descendant text content of\n the dfn element that gives the term being defined.\nIf the title attribute of the dfn element is\n present, then it must contain only the term being defined.\nAn a element that links to a dfn element represents an instance of\n the term defined by the dfn element.","num":"4.5.8","tag":"dfn"},{"description":"The abbr element represents an abbreviation or acronym, optionally\n with its expansion. The title attribute may be used to provide an expansion of the\n abbreviation. The attribute, if specified, must contain an expansion of the abbreviation, and\n nothing else.\nIf an abbreviation is pluralized, the expansion's grammatical number (plural vs singular) must\n match the grammatical number of the contents of the element.\nAbbreviations do not have to be marked up using this element. It is expected to be useful in\n the following cases:\nAbbreviations for which the author wants to give expansions, where using the\n abbr element with a title attribute is an\n alternative to including the expansion inline (e.g. in parentheses).Abbreviations that are likely to be unfamiliar to the document's readers, for which authors\n are encouraged to either mark up the abbreviation using an abbr element with a title attribute or include the expansion inline in the text the first\n time the abbreviation is used.Abbreviations whose presence needs to be semantically annotated, e.g. so that they can be\n identified from a style sheet and given specific styles, for which the abbr element\n can be used without a title attribute.\nProviding an expansion in a title attribute once\n will not necessarily cause other abbr elements in the same document with the same\n contents but without a title attribute to behave as if they had\n the same expansion. Every abbr element is independent.","num":"4.5.9","tag":"abbr"},{"description":"The ruby element allows one or more spans of phrasing content to be marked with\n ruby annotations. Ruby annotations are short runs of text presented alongside base text, primarily\n used in East Asian typography as a guide for pronunciation or to include other annotations. In\n Japanese, this form of typography is also known as furigana.\nThe content model of ruby elements consists of one or more of the following\n sequences:\nOne or the other of the following:\n Phrasing content, but with no ruby elements and with no ruby element descendants\n A single ruby element that itself has no ruby element descendants\n \n One or the other of the following:\n One or more rt elements\n An rp element followed by one or more rt elements, each of which is itself followed by an rp element\n \n \nThe ruby and rt elements can be used for a variety of kinds of\n annotations, including in particular (though by no means limited to) those described below. For\n more details on Japanese Ruby in particular, and how to render Ruby for Japanese, see\n Requirements for Japanese Text Layout. [JLREQ]\nMono-ruby for individual base characters in Japanese\n \n \n One or more hiragana or katakana characters (the ruby annotation) are placed with each\n ideographic character (the base text). This is used to provide readings of kanji characters.\n \n \n \n \n Mono-ruby for compound words (jukugo)\n \n \n This is similar to the previous case: each ideographic character in the compound word (the\n base text) has its reading given in hiragana or katakana characters (the ruby annotation). The\n difference is that the base text segments form a compound word rather than being separate from\n each other.\n \n \n \n \n Jukugo-ruby\n \n \n This is semantically identical to the previous case (each individual ideographic character in\n the base compound word has its reading given in an annotation in hiragana or katakana\n characters), but the rendering is the more complicated Jukugo Ruby rendering.\n \n \n \n \n Group ruby for describing meanings\n \n \n The annotation describes the meaning of the base text, rather than (or in addition to) the\n pronunciation. As such, both the base text and the annotation can be multiple characters long.\n \n \n \n \n \n \n Group ruby for Jukuji readings\n \n \n A phonetic reading that corresponds to multiple base characters, because a one-to-one mapping\n would be difficult. (In English, the words \"Colonel\" and \"Lieutenant\" are examples of words\n where a direct mapping of pronunciation to individual letters is, in some dialects, rather\n unclear.)\n \n \n Text with both phonetic and semantic annotations (double-sided ruby)\n \n \n Sometimes, ruby styles described above are combined.\n \n If this results in two annotations covering the same single base segment, then the\n annotations can just be placed back to back.\n \n \n \n \n \n \n \n In more complicated situations such as the following examples, a nested ruby\n element is used to give the inner annotations, and then that whole ruby is then\n given an annotation at the \"outer\" level.\n \n \n \n \n \n \n \nWithin a ruby element that does not have a ruby element ancestor,\n content is segmented and segments are placed into three categories: base text segments, annotation\n segments, and ignored segments. Ignored segments do not form part of the document's semantics\n (they consist of some inter-element whitespace and rp elements, the\n latter of which are used for legacy user agents that do not support ruby at all). Base text\n segments can overlap (with a limit of two segments overlapping any one position in the DOM, and\n with any segment having an earlier start point than an overlapping segment also having an equal or\n later end point, and any segment have a later end point than an overlapping segment also having an\n equal or earlier start point). Annotation segments correspond to rt elements. Each annotation\n segment can be associated with a base text segment, and each base text segment can have annotation\n segments associated with it. (In a conforming document, each base text segment is associated with\n at least one annotation segment, and each annotation segment is associated with one base text\n segment.) A ruby element represents the union of the segments of base\n text it contains, along with the mapping from those base text segments to annotation segments.\n Segments are described in terms of DOM ranges; annotation segment ranges always\n consist of exactly one element. [DOM]\nAt any particular time, the segmentation and categorization of content of a ruby\n element is the result that would be obtained from running the following algorithm:\nLet base text segments be an empty list of base text segments, each\n potentially with a list of base text subsegments.Let annotation segments be an empty list of annotation segments, each\n potentially being associated with a base text segment or subsegment.Let root be the ruby element for which the algorithm is\n being run.If root has a ruby element ancestor, then jump to the\n step labeled end.Let current parent be root.Let index be 0.Let start index be null.Let parent start index be null.Let current base text be null.Start mode: If index is equal to or greater than the number of\n child nodes in current parent, then jump to the step labeled end\n mode.\n \n If the indexth node in current parent is an\n rt or rp element, jump to the step labeled annotation\n mode.Set start index to the value of index.Base mode: If the indexth node in current\n parent is a ruby element, and if current parent is the\n same element as root, then push a ruby level and then jump to\n the step labeled start mode.If the indexth node in current parent is an\n rt or rp element, then set the current base text and then\n jump to the step labeled annotation mode.Increment index by one.Base mode post-increment: If index is equal to or greater than\n the number of child nodes in current parent, then jump to the step labeled\n end mode.Jump back to the step labeled base mode.Annotation mode: If the indexth node in current\n parent is an rt element, then push a ruby annotation and jump to\n the step labeled annotation mode increment.If the indexth node in current parent is an\n rp element, jump to the step labeled annotation mode increment.If the indexth node in current parent is not a\n Text node, or is a Text node that is not inter-element\n whitespace, then jump to the step labeled base mode.Annotation mode increment: Let lookahead index be index plus one.Annotation mode white-space skipper: If lookahead index is\n equal to the number of child nodes in current parent then jump to the step\n labeled end mode.If the lookahead indexth node in current parent is\n an rt element or an rp element, then set index to\n lookahead index and jump to the step labeled annotation mode.If the lookahead indexth node in current parent is\n not a Text node, or is a Text node that is not inter-element\n whitespace, then jump to the step labeled base mode (without further incrementing\n index, so the inter-element whitespace seen so far becomes part\n of the next base text segment).Increment lookahead index by one.Jump to the step labeled annotation mode white-space skipper.End mode: If current parent is not the same element as root, then pop a ruby level and jump to the step labeled base mode\n post-increment.End: Return base text segments and annotation\n segments. Any content of the ruby element not described by segments in either\n of those lists is implicitly in an ignored segment.\nWhen the steps above say to set the current base text, it means to run the following\n steps at that point in the algorithm:\nLet text range be a DOM range whose start is the boundary\n point (current parent, start index) and whose\n end is the boundary\n point (current parent, index).Let new text segment be a base text segment described by the range\n annotation range.\n \n Add new text segment to base text\n segments.Let current base text be new text\n segment.Let start index be null.\nWhen the steps above say to push a ruby level, it means to run the following steps\n at that point in the algorithm:\nLet current parent be the indexth node in current parent.Let index be 0.Set saved start index to the value of start\n index.Let start index be null.\nWhen the steps above say to pop a ruby level, it means to run the following steps at\n that point in the algorithm:\nLet index be the position of current parent in\n root.Let current parent be root.Increment index by one.Set start index to the value of saved start\n index.Let saved start index be null.\nWhen the steps above say to push a ruby annotation, it means to run the following\n steps at that point in the algorithm:\nLet rt be the rt element that is the indexth node of current parent.Let annotation range be a DOM range whose start is the boundary\n point (current parent, index) and whose end is the boundary point\n (current parent, index plus one) (i.e. that contains only\n rt).Let new annotation segment be an annotation segment described by the\n range annotation range.If current base text is not null, associate new\n annotation segment with current base text.Add new annotation segment to annotation\n segments.","num":"4.5.10","tag":"ruby"},{"description":"The rt element marks the ruby text component of a ruby annotation. When it is the\n child of a ruby element, it doesn't represent\n anything itself, but the ruby element uses it as part of determining what it\n represents.\nAn rt element that is not a child of a ruby element\n represents the same thing as its children.","num":"4.5.11","tag":"rt"},{"description":"The rp element can be used to provide parentheses or other content around a ruby\n text component of a ruby annotation, to be shown by user agents that don't support ruby\n annotations.\nAn rp element that is a child of a ruby\n element represents nothing. An rp element\n whose parent element is not a ruby element represents its\n children.","num":"4.5.12","tag":"rp"},{"description":"The data element represents its contents, along with a\n machine-readable form of those contents in the value\n attribute.\nThe value attribute\n must be present. Its value must be a representation of the element's contents in a\n machine-readable format.\nThe element can be used for several purposes.\nWhen combined with microformats or the microdata attributes defined in\n this specification, the element serves to provide both a machine-readable value for the purposes\n of data processors, and a human-readable value for the purposes of rendering in a web browser. In\n this case, the format to be used in the value attribute is\n determined by the microformats or microdata vocabulary in use.\nThe element can also, however, be used in conjunction with scripts in the page, for when a\n script has a literal value to store alongside a human-readable value. In such cases, the format to\n be used depends only on the needs of the script. (The data-*\n attributes can also be useful in such situations.)\nThe value IDL\n attribute must reflect the content attribute of the same name.","num":"4.5.13","tag":"data"},{"description":"The time element represents its contents, along with a\n machine-readable form of those contents in the datetime\n attribute. The kind of content is limited to various kinds of dates, times, time-zone offsets, and\n durations, as described below.\nThe datetime\n attribute may be present. If present, its value must be a representation of the element's contents\n in a machine-readable format.\nA time element that does not have a datetime content attribute must not have any element\n descendants.\nThe datetime value of a time element is the value of the element's\n datetime content attribute, if it has one, otherwise the\n child text content of the time element.\nThe datetime value of a time element must match one of the following\n syntaxes.\nA valid month string\n 2011-11\n A valid date string\n 2011-11-18\n A valid yearless date string\n 11-18\n A valid time string\n 14:54\n 14:54:39\n 14:54:39.929\n A valid local date and time string\n 2011-11-18T14:54\n 2011-11-18T14:54:39\n 2011-11-18T14:54:39.929\n 2011-11-18 14:54\n 2011-11-18 14:54:39\n 2011-11-18 14:54:39.929\n \n \n A valid time-zone offset string\n Z\n +0000\n +00:00\n -0800\n -08:00\n \n \n A valid global date and time string\n 2011-11-18T14:54Z\n 2011-11-18T14:54:39Z\n 2011-11-18T14:54:39.929Z\n \n 2011-11-18T14:54+0000\n 2011-11-18T14:54:39+0000\n 2011-11-18T14:54:39.929+0000\n \n 2011-11-18T14:54+00:00\n 2011-11-18T14:54:39+00:00\n 2011-11-18T14:54:39.929+00:00\n \n 2011-11-18T06:54-0800\n 2011-11-18T06:54:39-0800\n 2011-11-18T06:54:39.929-0800\n \n 2011-11-18T06:54-08:00\n 2011-11-18T06:54:39-08:00\n 2011-11-18T06:54:39.929-08:00\n \n 2011-11-18 14:54Z\n 2011-11-18 14:54:39Z\n 2011-11-18 14:54:39.929Z\n \n 2011-11-18 14:54+0000\n 2011-11-18 14:54:39+0000\n 2011-11-18 14:54:39.929+0000\n \n 2011-11-18 14:54+00:00\n 2011-11-18 14:54:39+00:00\n 2011-11-18 14:54:39.929+00:00\n \n 2011-11-18 06:54-0800\n 2011-11-18 06:54:39-0800\n 2011-11-18 06:54:39.929-0800\n \n 2011-11-18 06:54-08:00\n 2011-11-18 06:54:39-08:00\n 2011-11-18 06:54:39.929-08:00\n \n \n A valid week string\n 2011-W47\n Four or more ASCII digits, at least one of which is not U+0030 DIGIT ZERO (0)\n 2011\n \n 0001\n A valid duration string\n PT4H18M3S\n \n 4h 18m 3s\n \nThe machine-readable equivalent of the element's contents must be obtained from the\n element's datetime value by using the following algorithm:\nIf parsing a month string from the element's\n datetime value returns a month, that is the\n machine-readable equivalent; return.If parsing a date string from the element's\n datetime value returns a date, that is the\n machine-readable equivalent; return.If parsing a yearless date string from\n the element's datetime value returns a yearless\n date, that is the machine-readable equivalent; return.If parsing a time string from the element's\n datetime value returns a time, that is the\n machine-readable equivalent; return.If parsing a local date and time\n string from the element's datetime value returns a local date and time, that is the machine-readable\n equivalent; return.If parsing a time-zone offset string\n from the element's datetime value returns a time-zone\n offset, that is the machine-readable equivalent; return.If parsing a global date and time\n string from the element's datetime value returns a global date and time, that is the machine-readable equivalent;\n return.If parsing a week string from the element's\n datetime value returns a week, that is the\n machine-readable equivalent; return.If the element's datetime value consists of only ASCII digits,\n at least one of which is not U+0030 DIGIT ZERO (0), then the machine-readable equivalent is the\n base-ten interpretation of those digits, representing a year; return.If parsing a duration string from the\n element's datetime value returns a duration,\n that is the machine-readable equivalent; return.There is no machine-readable equivalent.\nThe dateTime\n IDL attribute must reflect the element's datetime content attribute.","num":"4.5.14","tag":"time"},{"description":"The code element represents a fragment of computer code. This could\n be an XML element name, a filename, a computer program, or any other string that a computer would\n recognize.\nThere is no formal way to indicate the language of computer code being marked up. Authors who\n wish to mark code elements with the language used, e.g. so that syntax highlighting\n scripts can use the right rules, can use the class attribute, e.g.\n by adding a class prefixed with \"language-\" to the element.","num":"4.5.15","tag":"code"},{"description":"The var element represents a variable. This could be an actual\n variable in a mathematical expression or programming context, an identifier representing a\n constant, a symbol identifying a physical quantity, a function parameter, or just be a term used\n as a placeholder in prose.\nFor mathematics, in particular for anything beyond the simplest of expressions, MathML is more\n appropriate. However, the var element can still be used to refer to specific\n variables that are then mentioned in MathML expressions.","num":"4.5.16","tag":"var"},{"description":"The samp element represents sample or quoted output from another\n program or computing system.","num":"4.5.17","tag":"samp"},{"description":"The kbd element represents user input (typically keyboard input,\n although it may also be used to represent other input, such as voice commands).\nWhen the kbd element is nested inside a samp element, it represents\n the input as it was echoed by the system.\nWhen the kbd element contains a samp element, it represents\n input based on system output, for example invoking a menu item.\nWhen the kbd element is nested inside another kbd element, it\n represents an actual key or other single unit of input as appropriate for the input mechanism.","num":"4.5.18","tag":"kbd"},{"description":"The i element represents a span of text in an alternate voice or\n mood, or otherwise offset from the normal prose in a manner indicating a different quality of\n text, such as a taxonomic designation, a technical term, an idiomatic phrase from another\n language, transliteration, a thought, or a ship name in Western texts.\nTerms in languages different from the main text should be annotated with lang attributes (or, in XML, lang attributes in the XML namespace).\nAuthors can use the class attribute on the i\n element to identify why the element is being used, so that if the style of a particular use (e.g.\n dream sequences as opposed to taxonomic terms) is to be changed at a later date, the author\n doesn't have to go through the entire document (or series of related documents) annotating each\n use.\nAuthors are encouraged to consider whether other elements might be more applicable than the\n i element, for instance the em element for marking up stress emphasis,\n or the dfn element to mark up the defining instance of a term.","num":"4.5.20","tag":"i"},{"description":"The b element represents a span of text to which attention is being\n drawn for utilitarian purposes without conveying any extra importance and with no implication of\n an alternate voice or mood, such as key words in a document abstract, product names in a review,\n actionable words in interactive text-driven software, or an article lede.\nAs with the i element, authors can use the class\n attribute on the b element to identify why the element is being used, so that if the\n style of a particular use is to be changed at a later date, the author doesn't have to go through\n annotating each use.\nThe b element should be used as a last resort when no other element is more\n appropriate. In particular, headings should use the h1 to h6 elements,\n stress emphasis should use the em element, importance should be denoted with the\n strong element, and text marked or highlighted should use the mark\n element.","num":"4.5.21","tag":"b"},{"description":"The u element represents a span of text with an unarticulated, though\n explicitly rendered, non-textual annotation, such as labeling the text as being a proper name in\n Chinese text (a Chinese proper name mark), or labeling the text as being misspelt.\nIn most cases, another element is likely to be more appropriate: for marking stress emphasis,\n the em element should be used; for marking key words or phrases either the\n b element or the mark element should be used, depending on the context;\n for marking book titles, the cite element should be used; for labeling text with explicit textual annotations, the\n ruby element should be used; for technical terms, taxonomic designation,\n transliteration, a thought, or for labeling ship names in Western texts, the i\n element should be used.","num":"4.5.22","tag":"u"},{"description":"The mark element represents a run of text in one document marked or\n highlighted for reference purposes, due to its relevance in\n another context. When used in a quotation or other block of text referred to from the prose, it\n indicates a highlight that was not originally present but which has been added to bring the\n reader's attention to a part of the text that might not have been considered important by the\n original author when the block was originally written, but which is now under previously\n unexpected scrutiny. When used in the main prose of a document, it indicates a part of the\n document that has been highlighted due to its likely relevance to the user's current activity.","num":"4.5.23","tag":"mark"},{"description":"The bdi element represents a span of text that is to be isolated from\n its surroundings for the purposes of bidirectional text formatting. [BIDI]","num":"4.5.24","tag":"bdi"},{"description":"The bdo element represents explicit text directionality formatting\n control for its children. It allows authors to override the Unicode bidirectional algorithm by\n explicitly specifying a direction override. [BIDI]\nAuthors must specify the dir attribute on this element, with the\n value ltr to specify a left-to-right override and with the value rtl to\n specify a right-to-left override. The auto value must not be specified.","num":"4.5.25","tag":"bdo"},{"description":"The span element doesn't mean anything on its own, but can be useful when used\n together with the global attributes, e.g. class,\n lang, or dir. It\n represents its children.","num":"4.5.26","tag":"span"},{"description":"The br element represents a line break.\nbr elements must be used only for line breaks that are actually part of the\n content, as in poems or addresses.\nbr elements must not be used for separating thematic groups in a paragraph.\nIf a paragraph consists of nothing but a single br element, it\n represents a placeholder blank line (e.g. as in a template). Such blank lines must not be used for\n presentation purposes.\nAny content inside br elements must not be considered part of the surrounding\n text.","num":"4.5.27","tag":"br"},{"description":"The wbr element represents a line break opportunity.\nAny content inside wbr elements must not be considered part of the surrounding\n text.\nvar wbr = document.createElement(\"wbr\");\n wbr.textContent = \"This is wrong\";\n document.body.appendChild(wbr);","num":"4.5.28","tag":"wbr"},{"description":"The ins element represents an addition to the document.\nins elements should not cross implied paragraph\n boundaries.","num":"4.7.1","tag":"ins"},{"description":"The del element represents a removal from the document.\ndel elements should not cross implied paragraph\n boundaries.","num":"4.7.2","tag":"del"},{"description":"The picture element is a container\n which provides multiple sources to its contained img element\n to allow authors to declaratively control or give hints to the user agent about which image resource to use,\n based on the screen pixel density, viewport size, image format, and other factors.\n It represents its children.","num":"4.8.1","tag":"picture"},{"description":"The source element allows authors to specify multiple alternative\n source sets for img elements or multiple alternative\n media resources for media\n elements. It does not represent anything on its own.\nThe type attribute\n may be present. If present, the value must be a valid MIME type string.\nThe remainder of the requirements depend on whether the parent is a picture\n element or a media element:\nThe source element's parent is a picture element\n The srcset\n attribute must be present, and is a srcset attribute.\n \n The srcset attribute contributes the image sources to the source set, if the\n source element is selected.\n \n If the srcset attribute has any image candidate strings using a width descriptor, the sizes attribute must\n also be present, and is a sizes attribute. The sizes attribute contributes the source size to\n the source set, if the source element is selected.\n \n The media\n attribute may also be present. If present, the value must contain a valid media query\n list. The user agent will skip to the next source element if the value does\n not match the environment.\n \n The source element supports dimension attributes. The\n img element can use the width and height attributes of a source element, instead of\n those on the img element itself, to determine its rendered dimensions and\n aspect-ratio, as defined in the Rendering section.\n \n The type attribute gives the type of the images in the\n source set, to allow the user agent to skip to the next source element\n if it does not support the given type.\n \n \n \n When a source element has a following sibling source element or\n img element with a srcset attribute\n specified, it must have at least one of the following:\n \n A media attribute specified with a value that,\n after stripping leading and trailing\n ASCII whitespace, is not the empty string and is not an ASCII\n case-insensitive match for the string \"all\".A type attribute specified.\n \n The src attribute must not be present.\n The source element's parent is a media element\n The src attribute\n gives the URL of the media resource. The value must be a valid\n non-empty URL potentially surrounded by spaces. This attribute must be present.\n \n The type attribute gives the type of the media\n resource, to help the user agent determine if it can play this media\n resource before fetching it. The codecs parameter, which certain\n MIME types define, might be necessary to specify exactly how the resource is encoded. [RFC6381]\n \n \n \n \n \n The srcset, sizes, and media\n attributes must not be present.\n \nThe source HTML element insertion\n steps, given insertedNode, are:\nIf insertedNode's parent is a media element that has no src attribute and whose networkState has the value NETWORK_EMPTY, then invoke that media\n element's resource selection\n algorithm.If insertedNode's next sibling is an img element and its parent is\n a picture element, then, count this as a relevant\n mutation for the img element.\nThe source HTML element removing\n steps, given removedNode and oldParent, are:\nIf removedNode's next sibling was an img element and\n oldParent is a picture element, then, count this as a relevant mutation for the img element.\nThe IDL attributes src, type, srcset, sizes and media must reflect the respective\n content attributes of the same name.","num":"4.8.2","tag":"source"},{"description":"An img element represents an image.\nAn img element has a dimension\n attribute source, initially set to the element itself.\nThe image given by the src\n and srcset attributes, and\n any previous sibling source elements' srcset\n attributes if the parent is a picture element, is the embedded content; the value of\n the alt attribute provides\n equivalent content for those who cannot process images or who have image loading disabled (i.e. it\n is the img element's fallback content).\nThe requirements on the alt attribute's value are described\n in a separate section.\nThe src attribute must be present, and must contain a\n valid non-empty URL potentially surrounded by spaces referencing a non-interactive,\n optionally animated, image resource that is neither paged nor scripted.\nThe srcset attribute may also be present, and is a\n srcset attribute.\nThe srcset attribute and the src attribute (if width\n descriptors are not used) contribute the image sources\n to the source set (if no source element was selected).\nIf the srcset attribute is present and has any image candidate strings using a width\n descriptor, the sizes attribute must also\n be present, and is a sizes attribute. The sizes\n attribute contributes the source size to the source set (if no\n source element was selected).\nThe crossorigin\n attribute is a CORS settings attribute. Its purpose is to allow images from\n third-party sites that allow cross-origin access to be used with canvas.\nThe referrerpolicy attribute is a referrer\n policy attribute. Its purpose is to set the referrer policy used when fetching the image. [REFERRERPOLICY]\nThe decoding\n attribute indicates the preferred method to decode this\n image. The attribute, if present, must be an image decoding hint. This attribute's missing value default and invalid value default are both the auto state.\nThe loading attribute is a lazy\n loading attribute. Its purpose is to indicate the policy for loading images that are\n outside the viewport.\nWhen the loading attribute's state is changed to the\n Eager state, the user agent must run these\n steps:\nLet resumptionSteps be the img element's lazy load\n resumption steps.If resumptionSteps is null, then return.Set the img's lazy load resumption steps to null.Invoke resumptionSteps.\nThe img HTML element insertion\n steps, given insertedNode, are:\nIf insertedNode's parent is a picture element, then, count this as\n a relevant mutation for\n insertedNode.\nThe img HTML element removing\n steps, given removedNode and oldParent, are:\nIf oldParent is a picture element, then, count this as a\n relevant mutation for removedNode.\nThe img element must not be used as a layout tool. In particular, img\n elements should not be used to display transparent images, as such images rarely convey meaning and\n rarely add anything useful to the document.\nWhat an img element represents depends on the src attribute and the alt\n attribute.\nIf the src attribute is set and the alt attribute is set to the empty string\n The image is either decorative or supplemental to the rest of the content, redundant with\n some other information in the document.\n \n If the image is available and the user agent is configured\n to display that image, then the element represents the element's image data.\n \n Otherwise, the element represents nothing, and may be omitted completely from\n the rendering. User agents may provide the user with a notification that an image is present but\n has been omitted from the rendering.\n If the src attribute is set and the alt attribute is set to a value that isn't empty\n The image is a key part of the content; the alt attribute\n gives a textual equivalent or replacement for the image.\n \n If the image is available and the user agent is configured\n to display that image, then the element represents the element's image data.\n \n Otherwise, the element represents the text given by the alt attribute. User agents may provide the user with a notification\n that an image is present but has been omitted from the rendering.\n If the src attribute is set and the alt attribute is not\n The image might be a key part of the content, and there is no textual equivalent of the image\n available.\n \n \n \n If the image is available and the user agent is configured\n to display that image, then the element represents the element's image data.\n \n If the image has a src attribute whose value is\n the empty string, then the element represents nothing.\n \n Otherwise, the user agent should display some sort of indicator that there is an image that\n is not being rendered, and may, if requested by the user, or if so configured, or when required\n to provide contextual information in response to navigation, provide caption information for the\n image, derived as follows:\n \n If the image has a title attribute whose value is not\n the empty string, then return the value of that attribute.If the image is a descendant of a figure element that has a child\n figcaption element, and, ignoring the figcaption element and its\n descendants, the figure element has no flow content descendants other\n than inter-element whitespace and the img element, then return the\n contents of the first such figcaption element.Return nothing. (There is no caption information.)\n If the src attribute is not set and either the alt attribute is set to the empty string or the alt attribute is not set at all\n The element represents nothing.\n Otherwise\n The element represents the text given by the alt attribute.\n \nThe alt attribute does not represent advisory information.\n User agents must not present the contents of the alt attribute\n in the same way as content of the title attribute.\nUser agents may always provide the user with the option to display any image, or to prevent any\n image from being displayed. User agents may also apply heuristics to help the user make use of the\n image when the user is unable to see it, e.g. due to a visual disability or because they are using\n a text terminal with no graphics capabilities. Such heuristics could include, for instance,\n optical character recognition (OCR) of text found within the image.\nWhile user agents are encouraged to repair cases of missing alt attributes, authors must not rely on such behavior. Requirements for providing text to act as an alternative for images are described\n in detail below.\nThe contents of img elements, if any, are ignored for the purposes of\n rendering.\nThe usemap attribute,\n if present, can indicate that the image has an associated\n image map.\nThe ismap attribute,\n when used on an element that is a descendant of an a element with an href attribute, indicates by its presence that the element\n provides access to a server-side image map. This affects how events are handled on the\n corresponding a element.\nThe ismap attribute is a\n boolean attribute. The attribute must not be specified\n on an element that does not have an ancestor a element\n with an href attribute.\nThe img element supports dimension\n attributes.\nThe alt, src, srcset and sizes IDL attributes must\n reflect the respective content attributes of the same name.\nThe crossOrigin IDL attribute must\n reflect the crossorigin content attribute,\n limited to only known values.\nThe useMap IDL\n attribute must reflect the usemap content\n attribute.\nThe isMap IDL\n attribute must reflect the ismap content\n attribute.\nThe referrerPolicy IDL attribute must\n reflect the referrerpolicy content\n attribute, limited to only known values.\nThe decoding\n IDL attribute must reflect the decoding\n content attribute, limited to only known values.\nThe loading\n IDL attribute must reflect the loading content\n attribute, limited to only known values.\nThe IDL attributes width and height must return the rendered width and height of the\n image, in CSS pixels, if the image is being rendered, and\n is being rendered to a visual medium; or else the density-corrected intrinsic width and\n height of the image, in CSS pixels, if the image has\n intrinsic dimensions and is available but not being\n rendered to a visual medium; or else 0, if the image is not available or does not have intrinsic dimensions. [CSS]\nOn setting, they must act as if they reflected the respective\n content attributes of the same name.\nThe IDL attributes naturalWidth and naturalHeight must return\n the density-corrected intrinsic width and height of the image, in CSS pixels, if the image has intrinsic dimensions and is available, or else 0. [CSS]\nThe IDL attribute complete must return true if any of the following\n conditions is true:\nBoth the src attribute and the srcset attribute are omitted.\n \n The srcset attribute is omitted and the src attribute's value is the empty string. \n \n The img element's current request's state is completely available and its\n pending request is null.\n \n The img element's current request's state is broken and its\n pending request is null.\n \nOtherwise, the attribute must return false.\nThe currentSrc IDL attribute must return the\n img element's current request's current\n URL.\nThe decode()\n method, when invoked, must perform the following steps:\nLet promise be a new promise.\n Queue a microtask to perform the following steps:\n \n \n This is done because updating the image data\n takes place in a microtask as well. Thus, to make code such as\n \n img.src = \"stars.jpg\";\n img.decode();\n \n properly decode stars.jpg, we need to delay any processing by one\n microtask.\n \n \n \n If any of the following conditions are true about this img element:\n \n its node document is not an active document;its current request's state is broken,\n \n then reject promise with an \"EncodingError\"\n DOMException.\n \n Otherwise, in parallel, wait for one of the following cases to occur, and\n perform the corresponding actions:\n \n This img element's node document stops being an active\n documentThis img element's current request changes or is mutatedThis img element's current request's state becomes broken\n Reject promise with an \"EncodingError\"\n DOMException.\n This img element's current request's state becomes completely\n available\n Decode the image.\n \n If decoding does not need to be performed for this image (for example because it is a\n vector graphic), resolve promise with undefined.\n \n If decoding fails (for example due to invalid image data), reject promise with\n an \"EncodingError\" DOMException.\n \n If the decoding process completes successfully, resolve promise with\n undefined.\n \n User agents should ensure that the decoded media data stays readily available until at\n least the end of the next successful update the rendering step in the\n event loop. This is an important part of the API contract, and should not be\n broken if at all possible. (Typically, this would only be violated in low-memory situations\n that require evicting decoded image data, or when the image is too large to keep in decoded\n form for this period of time.)\n \n \n \n \n Return promise.\nA legacy factory function is provided for creating HTMLImageElement objects (in\n addition to the factory methods from DOM such as createElement()): Image(width, height). When invoked,\n the legacy factory function must perform the following steps:\nLet document be the current global object's associated Document.Let img be the result of creating an\n element given document, img, and the HTML\n namespace.If width is given, then set\n an attribute value for img using \"width\"\n and width.If height is given, then set an attribute value for img\n using \"height\" and height.Return img.","num":"4.8.3","tag":"img"},{"description":"The iframe element represents its nested browsing\n context.\nThe src attribute\n gives the URL of a page that the element's nested browsing context is to\n contain. The attribute, if present, must be a valid non-empty URL potentially surrounded by\n spaces. If the itemprop attribute is specified on an\n iframe element, then the src attribute must\n also be specified.\nThe srcdoc\n attribute gives the content of the page that the element's nested browsing context is\n to contain. The value of the attribute is the source of an iframe srcdoc document.\nThe srcdoc attribute, if present, must have a value\n using the HTML syntax that consists of the following syntactic components, in the\n given order:\nAny number of comments and ASCII\n whitespace.Optionally, a DOCTYPE.\n \n Any number of comments and ASCII\n whitespace.The document element, in the form of an html element.Any number of comments and ASCII\n whitespace.\nWhen an iframe element element is inserted into a document whose browsing\n context is non-null, the user agent must run these steps:\n \n \nCreate a new nested browsing context for element.If element has a sandbox attribute,\n then parse the sandboxing directive given the\n attribute's value and element's iframe sandboxing flag\n set.Process the iframe attributes for element, with initialInsertion set to true.\nWhen an iframe element is removed\n from a document, the user agent must discard the element's nested browsing context, if it is not null,\n and then set the element's nested browsing context to null.\nWhenever an iframe element with a non-null nested browsing context\n has its srcdoc attribute set, changed, or removed, the\n user agent must process the iframe attributes.\nSimilarly, whenever an iframe element with a non-null nested browsing\n context but with no srcdoc attribute specified has\n its src attribute set, changed, or removed, the user agent\n must process the iframe attributes.\nTo process the iframe attributes for an element element,\n with an optional boolean initialInsertion (default false):\n\n If element's srcdoc attribute is\n specified, then:\n \n Set element's current navigation was lazy loaded boolean to\n false.\n If the will lazy load element steps given element return true,\n then:\n \n Set element's lazy load resumption steps to the rest of this\n algorithm starting with the step labeled navigate to the srcdoc resource.Set element's current navigation was lazy loaded boolean to\n true.Start intersection-observing a lazy loading element for\n element.Return.\n \n Navigate to the srcdoc resource: navigate an iframe or\n frame given element and a new response whose URL\n list is « about:srcdoc », header list is « (`Content-Type`, `text/html`) », and body is the value of element's srcdoc attribute.\n \n The resulting Document must be considered an iframe srcdoc document.\n \n Otherwise, run the shared attribute processing steps for iframe and\n frame elements given element and\n initialInsertion.\nThe shared attribute processing steps\n for iframe and frame elements, given an element\n element and a boolean initialInsertion, are:\nLet url be the URL record about:blank.If element has a src attribute specified,\n and its value is not the empty string, then parse the value of\n that attribute relative to element's node document. If this is\n successful, then set url to the resulting URL record.If there exists an ancestor browsing context of element's\n nested browsing context whose active document's URL, ignoring fragments, is equal to url, then return.\n If url matches about:blank and\n initialInsertion is true, then:\n \n \n Perform the URL and history update steps given element's\n nested browsing context's active document and url.\n \n \n Run the iframe load event steps given element.Return.\n Let resource be a new request whose URL is url and whose referrer policy is the current state of\n element's referrerpolicy content\n attribute.If element is an iframe element, then set element's\n current navigation was lazy loaded boolean to false.\n If element is an iframe element, and the will lazy load element\n steps given element return true, then:\n \n Set element's lazy load resumption steps to the rest of this\n algorithm starting with the step labeled navigate to the resource.Set element's current navigation was lazy loaded boolean to\n true.Start intersection-observing a lazy loading element for\n element.Return.\n Navigate to the resource: navigate an iframe or\n frame given element and resource.\nTo navigate an iframe or frame given an element\n element and a resource resource:\nLet historyHandling be \"default\".\n \n If element's nested browsing context's active\n document is not completely loaded, then set historyHandling to\n \"replace\".Let reportFrameTiming be the following step given response response: queue an element\n task on the networking task source given element's node\n document's relevant global object to finalize and report timing\n given response, element's node document's relevant\n global object, and element's local\n name.Navigate element's nested\n browsing context to resource, with historyHandling set to historyHandling, the\n source browsing context set to element's node document's\n browsing context, and\n processResponseEndOfBody set to\n reportFrameTiming.\nEach Document has an iframe load in progress flag and a mute\n iframe load flag. When a Document is created, these flags must be unset for\n that Document.\nTo run the iframe load event steps, given an iframe element\n element:\nAssert: element's nested browsing context is not null.Let childDocument be the active document of element's\n nested browsing context.If childDocument has its mute iframe load flag set, then\n return.Set childDocument's iframe load in progress flag.Fire an event named load at element.Unset childDocument's iframe load in progress flag.\nThis, in conjunction with scripting, can be used to probe the URL space of the\n local network's HTTP servers. User agents may implement cross-origin\n access control policies that are stricter than those described above to mitigate this attack, but\n unfortunately such policies are typically not compatible with existing web content.\nIf an element type potentially delays the load event, then for each element\n element of that type, the user agent must delay the load event of\n element's node document if element's nested browsing\n context is non-null and any of the following are true:\n \n \nelement's nested browsing context's active document\n is not ready for post-load tasks.Anything is delaying the load event of\n element's nested browsing context's active\n document.element's nested browsing context is in the delaying load events mode.\nEach iframe element has an associated current navigation was lazy\n loaded boolean, initially false. It is set and unset in the process the\n iframe attributes algorithm.\nAn iframe element whose current navigation was lazy loaded boolean is\n false potentially delays the load event.\nThe name attribute,\n if present, must be a valid browsing context name. The given value is used to name\n the element's nested browsing context if present when that is created.\nThe sandbox\n attribute, when specified, enables a set of extra restrictions on any content hosted by the\n iframe. Its value must be an unordered set of unique space-separated\n tokens that are ASCII case-insensitive. The allowed values are:\nallow-downloadsallow-formsallow-modalsallow-orientation-lockallow-pointer-lockallow-popupsallow-popups-to-escape-sandboxallow-presentationallow-same-originallow-scriptsallow-top-navigationallow-top-navigation-by-user-activationallow-top-navigation-to-custom-protocols\nWhen the attribute is set, the content is treated as being from a unique origin,\n forms, scripts, and various potentially annoying APIs are disabled, links are prevented from\n targeting other browsing contexts, and plugins are secured.\n The allow-same-origin keyword causes\n the content to be treated as being from its real origin instead of forcing it into a unique\n origin; the allow-top-navigation\n keyword allows the content to navigate its top-level browsing context;\n the allow-top-navigation-by-user-activation\n keyword behaves similarly but allows such navigation only when the\n browsing context's active window has transient activation; the allow-top-navigation-to-custom-protocols\n reenables navigations toward non fetch scheme to be handed off to external software; and the allow-forms, allow-modals, allow-orientation-lock, allow-pointer-lock, allow-popups, allow-presentation, allow-scripts, and allow-popups-to-escape-sandbox\n keywords re-enable forms, modal dialogs, screen orientation lock, the pointer lock API, popups,\n the presentation API, scripts, and the creation of unsandboxed auxiliary browsing contexts respectively. The allow-downloads keyword allows content to\n perform downloads. [POINTERLOCK] [SCREENORIENTATION] [PRESENTATION]\nThe allow-top-navigation and allow-top-navigation-by-user-activation\n keywords must not both be specified, as doing so is redundant; only allow-top-navigation will have an effect\n in such non-conformant markup.\nSimilarly, the allow-top-navigation-to-custom-protocols\n keyword must not be specified if either allow-top-navigation or allow-popups are specified, as doing so is\n redundant.\nSetting both the allow-scripts and allow-same-origin keywords together when the\n embedded page has the same origin as the page containing the iframe\n allows the embedded page to simply remove the sandbox\n attribute and then reload itself, effectively breaking out of the sandbox altogether.\nThese flags only take effect when the nested browsing context of\n the iframe element is navigated. Removing them, or\n removing the entire sandbox attribute, has no effect on\n an already-loaded page.\nPotentially hostile files should not be served from the same server as the file\n containing the iframe element. Sandboxing hostile content is of minimal help if an\n attacker can convince the user to just visit the hostile content directly, rather than in the\n iframe. To limit the damage that can be caused by hostile HTML content, it should be\n served from a separate dedicated domain. Using a different domain ensures that scripts in the\n files are unable to attack the site, even if the user is tricked into visiting those pages\n directly, without the protection of the sandbox\n attribute.\nWhen an iframe element's sandbox\n attribute is set or changed while it has a non-null nested browsing context, the user\n agent must parse the sandboxing directive given\n the attribute's value and the iframe element's iframe sandboxing\n flag set.\nWhen an iframe element's sandbox\n attribute is removed while it has a non-null nested browsing context, the user agent\n must empty the iframe element's iframe sandboxing flag\n set.\nThe allow\n attribute, when specified, determines the container\n policy that will be used when the permissions policy for a Document\n in the iframe's nested browsing context is initialized. Its value must\n be a serialized permissions policy.\n [PERMISSIONSPOLICY]\nThe allowfullscreen attribute is a boolean\n attribute. When specified, it indicates that Document objects in the\n iframe element's nested browsing context will be initialized with a\n permissions policy which allows the\n \"fullscreen\" feature to be used from any origin. This is\n enforced by the process permissions policy\n attributes algorithm. [PERMISSIONSPOLICY]\nTo determine whether a Document object document\n is allowed to use the policy-controlled-feature feature, run these\n steps:\nIf document's browsing context is\n null, then return false.If document's browsing context's\n active document is not document, then return false.If the result of running is feature enabled in document\n for origin on feature, document, and document's origin is \"Enabled\", then return\n true.Return false.\nBecause they only influence the permissions policy of the nested browsing\n context's active document, the allow\n and allowfullscreen attributes only take effect\n when the nested browsing context of the iframe is navigated. Adding or removing them has no effect on an already-loaded\n document.\nThe iframe element supports dimension attributes for cases where the\n embedded content has specific dimensions (e.g. ad units have well-defined dimensions).\nAn iframe element never has fallback content, as it will always\n create a new nested browsing context, regardless of whether the specified initial\n contents are successfully used.\nThe referrerpolicy attribute is a\n referrer policy attribute. Its purpose is to set the referrer policy\n used when processing the iframe\n attributes. [REFERRERPOLICY]\nThe loading attribute is a lazy\n loading attribute. Its purpose is to indicate the policy for loading iframe\n elements that are outside the viewport.\nWhen the loading attribute's state is changed to the\n Eager state, the user agent must run these\n steps:\nLet resumptionSteps be the iframe element's lazy load\n resumption steps.If resumptionSteps is null, then return.Set the iframe's lazy load resumption steps to null.Invoke resumptionSteps.\nDescendants of iframe elements represent nothing. (In legacy user agents that do\n not support iframe elements, the contents would be parsed as markup that could act as\n fallback content.)\nThe IDL attributes src, srcdoc, name, sandbox, and allow must reflect the respective content\n attributes of the same name.\nThe supported tokens for sandbox's DOMTokenList are the allowed\n values defined in the sandbox attribute and supported by\n the user agent.\nThe allowFullscreen IDL attribute must\n reflect the allowfullscreen content\n attribute.\nThe referrerPolicy IDL attribute must\n reflect the referrerpolicy content\n attribute, limited to only known values.\nThe loading IDL attribute must reflect the loading content attribute, limited to only known\n values.\nThe contentDocument IDL attribute, on getting, must\n return the iframe element's content\n document.\nThe contentWindow IDL attribute must return the\n WindowProxy object of the iframe element's nested browsing\n context, if its nested browsing context is non-null, or null otherwise.","num":"4.8.5","tag":"iframe"},{"description":"The embed element provides an integration point for an external (typically\n non-HTML) application or interactive content.\nThe src attribute\n gives the URL of the resource being embedded. The attribute, if present, must contain\n a valid non-empty URL potentially surrounded by spaces.\nAuthors should avoid referencing untrusted resources, as such a resource can be\n used to instantiate plugins or run scripts, even if the author has used features such as the Flash\n \"allowScriptAccess\" parameter.\nIf the itemprop attribute is specified on an\n embed element, then the src attribute must also\n be specified.\nThe type attribute,\n if present, gives the MIME type by which the plugin to instantiate is selected. The\n value must be a valid MIME type string. If both the type attribute and the src\n attribute are present, then the type attribute must specify\n the same type as the explicit Content-Type metadata of the\n resource given by the src attribute.\nWhile any of the following conditions are occurring, any plugin instantiated for\n the element must be removed, and the embed element represents\n nothing:\nThe element has neither a src attribute nor a type attribute.The element has a media element ancestor.The element has an ancestor object element that is not showing its\n fallback content.\nAn embed element is said to be potentially\n active when the following conditions are all met simultaneously:\nThe element is in a document or was in a document the last time the\n event loop reached step 1.The element's node document is fully active.The element has either a src attribute set or a type attribute set (or both).The element's src attribute is either absent or its value\n is not the empty string.The element is not a descendant of a media element.The element is not a descendant of an object element that is not showing its\n fallback content.The element is being rendered, or was being rendered the last time\n the event loop reached step 1.\nWhenever an embed element that was not potentially active becomes potentially active, and whenever a potentially active embed element that is\n remaining potentially active and has its src attribute set, changed, or removed or its type attribute set, changed, or removed, the user agent must\n queue an element task on the embed task source given the element\n to run the embed element setup steps for that element.\nThe embed element setup steps for a given embed element\n element are as follows:\nIf another task has since been queued to run the\n embed element setup steps for element, then return.\n If element has a src attribute set, then:\n \n Let url be the result of parsing the value\n of element's src attribute, relative to\n element's node document.If url is failure, then return.Let request be a new request whose\n URL is url, client is element's node\n document's relevant settings object, destination is \"embed\",\n credentials mode is \"include\", mode is \"navigate\", and whose use-URL-credentials flag is set.Let processResponseEndOfBody given response res be to finalize and report\n timing with res, element's node document's\n relevant global object, and \"embed\".\n Fetch request, with processResponseEndOfBody set to\n processResponseEndOfBody, and processResponse set\n to the following steps given response\n response:\n \n If another task has since been queued to run\n the embed element setup steps for element, then\n return.If response is a network error, then fire an event named load at element, and return.Let type be the result of determining the type of content given element and\n response.\n Switch on type:\n \n null\n Display no plugin for element.\n image/svg+xml\n If element's nested browsing context is null, then\n create a new nested browsing context for element.\n Navigate element's nested browsing context to\n response, with historyHandling set to\n \"replace\" and the source browsing context\n set to element's node document's browsing context.\n \n \n element now represents its nested browsing\n context.\n Otherwise\n Display a plugin for element, given type and\n response.\n \n \n \n \n Fetching the resource must delay the load event of element's\n node document.\n \n Otherwise:\n \n Let type be the value of element's type attribute.If type is a type that a plugin supports, then display a\n plugin for element given type.Otherwise, display no plugin for element.\n \nTo determine the type of the content given an\n embed element element and a response response, run the following steps:\nIf element has a type attribute, and that\n attribute's value is a type that a plugin supports, then return the value of the\n type attribute.\n If the path component of response's\n url matches a pattern that a plugin\n supports, then return the type that that plugin can handle.\n \n For example, a plugin might say that it can handle URLs with path components that end with the four character string\n \".swf\".\n \n \n \n If response has explicit Content-Type\n metadata, and that value is a type that a plugin supports, then return that\n value.Return null.\nTo display a plugin for an embed element element, given a\n string type and optionally a response\n response:\n\n If element's nested browsing context is not null, then:\n \n Discard element's\n nested browsing context.Set element's nested browsing context to null.\n Find and instantiate an appropriate plugin based on type,\n replacing any previously-instantiated plugin for element. If response was\n given, forward it to the plugin.element now represents this plugin instance.Once the plugin, and response if given, are completely loaded, queue an\n element task on the DOM manipulation task source give element to\n fire an event named load at element.\nTo display no plugin for an embed element element:\n\n If element's nested browsing context is not null, then:\n \n Discard element's\n nested browsing context.Set element's nested browsing context to null.\n Display an indication that no plugin could be found for element,\n replacing any previously-instantiated plugin for element.element now represents nothing.\nWhenever an embed element that was potentially\n active stops being potentially active, any\n plugin that had been instantiated for that element must be unloaded.\nWhen a plugin is to be instantiated but the\n sandboxed plugins browsing context flag is set on the embed element's\n node document's active sandboxing flag set, then the user agent must\n not instantiate the plugin, and must instead render the embed element\n in a manner that conveys that the plugin was disabled.\nThe embed element potentially delays the load event.\nAny namespace-less attribute other than name, align, hspace, and vspace may be\n specified on the embed element, so long as its name is XML-compatible\n and contains no ASCII upper alphas. These attributes are\n then passed as parameters to the plugin.\nThe user agent should pass the names and values of all the attributes of the embed\n element that have no namespace to the plugin used, when one is instantiated.\nThe HTMLEmbedElement object representing the element must expose the scriptable\n interface of the plugin instantiated for the embed element, if any.\nThe embed element supports dimension attributes.\nThe IDL attributes src and type each must reflect the respective content\n attributes of the same name.","num":"4.8.6","tag":"embed"},{"description":"The object element can represent an external resource, which, depending on the\n type of the resource, will either be treated as an image, as a child browsing\n context, or as an external resource to be processed by a plugin.\nThe data attribute\n specifies the URL of the resource. It must be present, and must contain a\n valid non-empty URL potentially surrounded by spaces.\nAuthors should avoid referencing untrusted resources, as such a resource can be\n used to instantiate plugins or run scripts, even if the author has used features such as the Flash\n \"allowScriptAccess\" parameter.\nThe type attribute,\n if present, specifies the type of the resource. If present, the attribute must be a valid\n MIME type string.\nThe name attribute,\n if present, must be a valid browsing context name. The given value is used to name\n the element's nested browsing context, if applicable, and if present when the\n element's nested browsing context is created.\nWhenever one of the following conditions occur:\nthe element is created,\n \n the element is popped off the stack of open elements of an HTML\n parser or XML parser,\n \n the element is not on the stack of open elements of an HTML parser\n or XML parser, and it is either inserted into a document or removed from a document,\n \n the element's node document changes whether it is fully active,\n \n one of the element's ancestor object elements changes to or from showing its\n fallback content,\n \n the element's classid attribute is set, changed, or\n removed,\n \n the element's classid attribute is not present, and\n its data attribute is set, changed, or removed,\n \n neither the element's classid attribute nor its\n data attribute are present, and its type attribute is set, changed, or removed,\n \n the element changes from being rendered to not being rendered, or vice versa,\n \n \n...the user agent must queue an element task on the DOM manipulation task\n source given the object element to run the following steps to (re)determine\n what the object element represents. This task\n being queued or actively running must delay the load\n event of the element's node document. \n\n If the user has indicated a preference that this object element's fallback\n content be shown instead of the element's usual behavior, then jump to the step below\n labeled fallback.\n \n \n If the element has an ancestor media element, or has an ancestor\n object element that is not showing its fallback content, or if\n the element is not in a document whose browsing\n context is non-null, or if the element's node document is not fully\n active, or if the element is still in the stack of open elements of an\n HTML parser or XML parser, or if the element is not being\n rendered, then jump to the step below labeled fallback.\n \n \n If the classid attribute is present, and has a\n value that isn't the empty string, then: if the user agent can find a plugin\n suitable according to the value of the classid\n attribute, and plugins aren't being sandboxed, then that\n plugin should be used, and the value of the data attribute, if any, should be passed to the\n plugin. If no suitable plugin can be found, or if the\n plugin reports an error, jump to the step below labeled fallback.\n \n \n If the data attribute is present and its value is\n not the empty string, then:\n \n If the type attribute is present and its value is\n not a type that the user agent supports, and is not a type that the user agent can find a\n plugin for, then the user agent may jump to the step below labeled fallback\n without fetching the content to examine its real type.Parse a URL given the data\n attribute, relative to the element's node document.If that failed, fire an event named error at the element, then jump to the step below labeled\n fallback.Let request be a new request whose\n URL is the resulting URL record,\n client is the element's node\n document's relevant settings object, destination is \"object\",\n credentials mode is \"include\", mode is \"navigate\", and whose use-URL-credentials flag is set.\n Fetch request, with processResponseEndOfBody given response res set to finalize and report\n timing with res, the element's node document's\n relevant global object, and \"object\".\n \n \n Fetching the resource must delay the load event of the element's node\n document until the task that is queued by the networking task source once the resource has been\n fetched (defined next) has been run.\n If the resource is not yet available (e.g. because the resource was not available in the\n cache, so that loading the resource required making a request over the network), then jump to\n the step below labeled fallback. The task that is\n queued by the networking task source once the\n resource is available must restart this algorithm from this step. Resources can load\n incrementally; user agents may opt to consider a resource \"available\" whenever enough data has\n been obtained to begin processing the resource.If the load failed (e.g. there was an HTTP 404 error, there was a DNS error), fire an event named error\n at the element, then jump to the step below labeled fallback.\n \n Determine the resource type, as follows:\n \n \n \n \n Let the resource type be unknown.\n \n \n \n If the user agent is configured to strictly obey Content-Type headers for this resource,\n and the resource has associated Content-Type metadata,\n then let the resource type be the type specified in the resource's Content-Type metadata, and jump to the step below\n labeled handler.\n \n This can introduce a vulnerability, wherein a site is trying to embed a\n resource that uses a particular plugin, but the remote site overrides that and instead\n furnishes the user agent with a resource that triggers a different plugin with different\n security characteristics. \n \n If there is a type attribute present on the\n object element, and that attribute's value is not a type that the user agent\n supports, but it is a type that a plugin supports, then let the resource type be the type specified in that type attribute, and jump to the step below labeled\n handler.\n \n Run the appropriate set of steps from the following\n list:\n \n If the resource has associated Content-Type\n metadata\n \n Let binary be false.\n \n If the type specified in the resource's Content-Type\n metadata is \"text/plain\", and the result of applying the rules for distinguishing if a resource is\n text or binary to the resource is that the resource is not\n text/plain, then set binary to true.\n \n If the type specified in the resource's Content-Type\n metadata is \"application/octet-stream\", then set binary to true.\n \n If binary is false, then let the resource\n type be the type specified in the resource's\n Content-Type metadata, and jump to the step below labeled handler.\n \n If there is a type attribute present on the\n object element, and its value is not application/octet-stream,\n then run the following steps:\n \n \n If the attribute's value is a type that a plugin supports, or the\n attribute's value is a type that starts with \"image/\" that is\n not also an XML MIME type, then let the resource type be the\n type specified in that type attribute.\n \n Jump to the step below labeled handler.\n \n \n Otherwise, if the resource does not have associated\n Content-Type metadata\n \n If there is a type attribute present on the\n object element, then let the tentative type be the type\n specified in that type attribute.\n \n Otherwise, let tentative type be the computed type of the resource.\n \n If tentative type is not\n application/octet-stream, then let resource type be\n tentative type and jump to the step below labeled\n handler.\n \n \n \n \n \n If applying the URL parser algorithm to the URL of the\n specified resource (after any redirects) results in a URL record whose path component matches a pattern that a plugin\n supports, then let resource type be the type that that plugin can\n handle.\n \n For example, a plugin might say that it can handle resources with path components that end with the four character string\n \".swf\".\n \n \n \n \n \n \n Handler: Handle the content as given by the first of the following cases that\n matches:\n \n If the resource type is not a type that the user agent supports, but\n it is a type that a plugin supports\n If the object element's nested browsing context is non-null,\n then it must be discarded and then set\n to null.\n \n If plugins are being sandboxed, then jump to the step\n below labeled fallback.\n \n Otherwise, the user agent should use the plugin that supports\n resource type and pass the content of the resource to that\n plugin. If the plugin reports an error, then jump to the step\n below labeled fallback.\n If the resource type is an XML MIME type, or if the resource type\n does not start with \"image/\"\n If the object element's nested browsing context is null, then\n create a new nested browsing context for the element.\n \n If the URL of the given resource does not match about:blank, then navigate the element's nested browsing context to that resource, with historyHandling set to \"replace\" and the source browsing context set to the\n object element's node document's browsing context. (The data attribute of the object element doesn't\n get updated if the browsing context gets further navigated to other locations.)\n \n The object element represents its nested browsing\n context.\n \n \n If the resource type starts with \"image/\", and support\n for images has not been disabled\n If the object element's nested browsing context is non-null,\n then it must be discarded and then set\n to null.\n \n Apply the image sniffing rules to\n determine the type of the image.\n \n The object element represents the specified image.\n \n If the image cannot be rendered, e.g. because it is malformed or in an unsupported\n format, jump to the step below labeled fallback.\n Otherwise\n The given resource type is not supported. Jump to the step below\n labeled fallback.\n \n \n \n The element's contents are not part of what the object element\n represents.\n \n \n If the object element does not represent its nested browsing\n context, then once the resource is completely loaded, queue an element\n task on the DOM manipulation task source given the object\n element to fire an event named load at the element.\n \n \n Return.\n If the data attribute is absent but the type attribute is present, and the user agent can find a\n plugin suitable according to the value of the type attribute, and plugins\n aren't being sandboxed, then that plugin should be\n used. If these conditions cannot be met, or if the plugin reports an error,\n jump to the step below labeled fallback. Otherwise return; once the plugin is completely\n loaded, queue an element task on the DOM manipulation task source\n given the object element to fire an event\n named load at the element.Fallback: The object element represents the element's\n children. This is the element's fallback content. If the element has an\n instantiated plugin, then unload it. If the element's nested browsing\n context is non-null, then it must be discarded and then set to null.\nWhen the algorithm above instantiates a plugin, the user agent\n should pass to the plugin used the names and values of all the attributes on the\n element, in the order they were added to the element, with the attributes added by the parser\n being ordered in source order. If the plugin supports a scriptable interface, the\n HTMLObjectElement object representing the element should expose that interface. The\n object element represents the plugin. The\n plugin is not a nested browsing context.\nPlugins are considered sandboxed for the purpose of an\n object element if the sandboxed plugins browsing context flag is set on\n the object element's node document's active sandboxing flag\n set.\nDue to the algorithm above, the contents of object elements act as fallback\n content, used only when referenced resources can't be shown (e.g. because it returned a 404\n error). This allows multiple object elements to be nested inside each other,\n targeting multiple user agents with different capabilities, with the user agent picking the first\n one it supports.\nThe object element potentially delays the load event.\nThe form attribute is used to explicitly associate the\n object element with its form owner.\nThe object element supports dimension attributes.\nThe IDL attributes data, type, and name each must reflect the respective content\n attributes of the same name.\nThe contentDocument IDL attribute, on getting, must\n return the object element's content\n document.\nThe contentWindow IDL attribute must return the\n WindowProxy object of the object element's nested browsing\n context, if its nested browsing context is non-null; otherwise, it must return\n null.\nThe willValidate, validity, and validationMessage attributes, and the checkValidity(), reportValidity(), and setCustomValidity() methods, are part of the\n constraint validation API. The form IDL attribute\n is part of the element's forms API.","num":"4.8.7","tag":"object"},{"description":"A video element is used for playing videos or movies, and audio files with\n captions.\nContent may be provided inside the video element. User agents\n should not show this content to the user; it is intended for older web browsers which do\n not support video, so that legacy video plugins can be tried, or to show text to the\n users of these older browsers informing them of how to access the video contents.\nThe video element is a media element whose media data is\n ostensibly video data, possibly with associated audio data.\nThe src, crossorigin,\n preload, autoplay,\n loop, muted, and controls attributes are the attributes common to all media elements.\nThe poster\n attribute gives the URL of an image file that the user agent can show while no video\n data is available. The attribute, if present, must contain a valid non-empty URL\n potentially surrounded by spaces.\nIf the specified resource is to be used, then, when the element is created or when the poster attribute is set, changed, or removed, the user agent must\n run the following steps to determine the element's poster frame (regardless of the\n value of the element's show poster flag):\nIf there is an existing instance of this algorithm running for this video\n element, abort that instance of this algorithm without changing the poster\n frame.If the poster attribute's value is the empty string\n or if the attribute is absent, then there is no poster frame; return.Parse the poster attribute's value relative to the element's node\n document. If this fails, then there is no poster frame; return.Let request be a new request whose\n URL is the resulting URL record,\n client is the element's node document's\n relevant settings object, destination is \"image\", credentials mode is \"include\", and whose use-URL-credentials flag is set.\n \n Fetch request, with\n processResponseEndOfBody given\n response res set to\n finalize and report timing with res, the element's\n node document's relevant global object, and\n \"video\". This must delay the load event of the element's\n node document.If an image is thus obtained, the poster frame is that image. Otherwise,\n there is no poster frame.\nThe playsinline attribute is a boolean\n attribute. If present, it serves as a hint to the user agent that the video ought to be\n displayed \"inline\" in the document by default, constrained to the element's playback area, instead\n of being displayed fullscreen or in an independent resizable window.\nA video element represents what is given for the first matching condition in the\n list below:\nWhen no video data is available (the element's readyState attribute is either HAVE_NOTHING, or HAVE_METADATA but no video data has yet been obtained at\n all, or the element's readyState attribute is any\n subsequent value but the media resource does not have a video channel)The video element represents its poster frame, if any,\n or else transparent black with no intrinsic dimensions.When the video element is paused, the current playback position is the first frame of video,\n and the element's show poster flag is setThe video element represents its poster frame, if any,\n or else the first frame of the video.When the video element is paused, and the\n frame of video corresponding to the current playback\n position is not available (e.g. because the video is seeking or buffering)When the video element is neither potentially playing nor paused (e.g. when seeking or stalled)The video element represents the last frame of the video to have\n been rendered.When the video element is pausedThe video element represents the frame of video corresponding to\n the current playback position.Otherwise (the video element has a video channel and is potentially\n playing)The video element represents the frame of video at the continuously\n increasing \"current\" position. When the\n current playback position changes such that the last frame rendered is no longer the\n frame corresponding to the current playback position in the video, the new frame\n must be rendered.\nFrames of video must be obtained from the video track that was selected when the event loop last reached\n step 1.\nThe video element also represents any text track cues whose text track cue active flag is set and whose\n text track is in the showing mode, and any\n audio from the media resource, at the current playback position.\nAny audio associated with the media resource must, if played, be played\n synchronized with the current playback position, at the element's effective\n media volume. The user agent must play the audio from audio tracks that were enabled when the event loop last reached step\n 1.\nIn addition to the above, the user agent may provide messages to the user (such as \"buffering\",\n \"no video loaded\", \"error\", or more detailed information) by overlaying text or icons on the video\n or other areas of the element's playback area, or in another appropriate manner.\nUser agents that cannot render the video may instead make the element represent a link to an external video playback utility or to the video\n data itself.\nWhen a video element's media resource has a video channel, the\n element provides a paint source whose width is the media resource's\n intrinsic width, whose height is the\n media resource's intrinsic\n height, and whose appearance is the frame of video corresponding to the current playback position, if that is available, or else\n (e.g. when the video is seeking or buffering) its previous appearance, if any, or else (e.g.\n because the video is still loading the first frame) blackness.\nThe intrinsic width and intrinsic height of the media resource\n are the dimensions of the resource in CSS pixels after taking into\n account the resource's dimensions, aspect ratio, clean aperture, resolution, and so forth, as\n defined for the format used by the resource. If an anamorphic format does not define how to apply\n the aspect ratio to the video data's dimensions to obtain the \"correct\" dimensions, then the user\n agent must apply the ratio by increasing one dimension and leaving the other unchanged.\nThe videoWidth IDL attribute must return the intrinsic width of the video in CSS pixels. The videoHeight IDL attribute must return the intrinsic height of the video in CSS pixels. If the element's readyState attribute is HAVE_NOTHING, then the attributes must return 0.\nWhenever the intrinsic width\n or intrinsic height of the video changes\n (including, for example, because the selected video\n track was changed), if the element's readyState\n attribute is not HAVE_NOTHING, the user agent must\n queue a media element task given the media element to fire an event named resize at the media element.\nThe video element supports dimension attributes.\nIn the absence of style rules to the contrary, video content should be rendered inside the\n element's playback area such that the video content is shown centered in the playback area at the\n largest possible size that fits completely within it, with the video content's aspect ratio being\n preserved. Thus, if the aspect ratio of the playback area does not match the aspect ratio of the\n video, the video will be shown letterboxed or pillarboxed. Areas of the element's playback area\n that do not contain the video represent nothing.\nThe intrinsic width of a video element's playback area is the\n intrinsic width of the poster frame, if that is available and the\n element currently represents its poster frame; otherwise, it is the intrinsic width of the video resource, if that is\n available; otherwise the intrinsic width is missing.\nThe intrinsic height of a video element's playback area is the\n intrinsic height of the poster frame, if that is available and the\n element currently represents its poster frame; otherwise it is the intrinsic height of the video resource, if that is\n available; otherwise the intrinsic height is missing.\nThe default object size is a width of 300 CSS pixels\n and a height of 150 CSS pixels. [CSSIMAGES]\nUser agents should provide controls to enable or disable the display of closed captions, audio\n description tracks, and other additional data associated with the video stream, though such\n features should, again, not interfere with the page's normal rendering.\nUser agents may allow users to view the video content in manners more suitable to the user,\n such as fullscreen or in an independent resizable window. User agents may even trigger such a\n viewing mode by default upon playing a video, although they should not do so when the playsinline attribute is specified. As with the other user\n interface features, controls to enable this should not interfere with the page's normal rendering\n unless the user agent is exposing a user\n interface. In such an independent viewing mode, however, user agents may make full user\n interfaces visible, even if the controls attribute is\n absent.\nUser agents may allow video playback to affect system features that could interfere with the\n user's experience; for example, user agents could disable screensavers while video playback is in\n progress.\nThe poster\n IDL attribute must reflect the poster content\n attribute.\nThe playsInline IDL attribute must reflect\n the playsinline content attribute.","num":"4.8.8","tag":"video"},{"description":"An audio element represents a sound or audio stream.\nContent may be provided inside the audio element. User agents\n should not show this content to the user; it is intended for older web browsers which do\n not support audio, so that legacy audio plugins can be tried, or to show text to the\n users of these older browsers informing them of how to access the audio contents.\nThe audio element is a media element whose media data is\n ostensibly audio data.\nThe src, crossorigin,\n preload, autoplay,\n loop, muted, and controls attributes are the attributes common to all media elements.\nA legacy factory function is provided for creating HTMLAudioElement objects (in\n addition to the factory methods from DOM such as createElement()): Audio(src). When invoked, the legacy factory function\n must perform the following steps:\nLet document be the current global object's associated Document.Let audio be the result of creating an\n element given document, audio, and the HTML\n namespace.Set an attribute value for\n audio using \"preload\" and \"auto\".If src is given, then set\n an attribute value for audio using \"src\"\n and src. (This will cause the user\n agent to invoke the object's resource selection\n algorithm before returning.)Return audio.","num":"4.8.9","tag":"audio"},{"description":"The track element allows authors to specify explicit external timed text tracks for media elements. It\n does not represent anything on its own.\nThe kind attribute is\n an enumerated attribute. The following table lists the keywords defined for this\n attribute. The keyword given in the first cell of each row maps to the state given in the second\n cell.\nKeyword\n State\n Brief description\n subtitles\n Subtitles\n \n Transcription or translation of the dialogue, suitable for when the sound is available but not understood (e.g. because the user does not understand the language of the media resource's audio track).\n Overlaid on the video.\n captions\n Captions\n \n Transcription or translation of the dialogue, sound effects, relevant musical cues, and other relevant audio information, suitable for when sound is unavailable or not clearly audible (e.g. because it is muted, drowned-out by ambient noise, or because the user is deaf).\n Overlaid on the video; labeled as appropriate for the hard-of-hearing.\n descriptions\n Descriptions\n \n Textual descriptions of the video component of the media resource, intended for audio synthesis when the visual component is obscured, unavailable, or not usable (e.g. because the user is interacting with the application without a screen while driving, or because the user is blind).\n Synthesized as audio.\n chapters\n Chapters metadata\n \n Tracks intended for use from script.\n Not displayed by the user agent.\n metadata\n Metadata\n \nThe attribute may be omitted. The missing value default\n is the subtitles state. The invalid value default is the metadata state.\nThe src attribute\n gives the URL of the text track data. The value must be a valid non-empty URL\n potentially surrounded by spaces. This attribute must be present.\nIf the element has a src attribute whose value is not the\n empty string and whose value, when the attribute was set, could be successfully parsed relative to the element's node document, then the\n element's track URL is the resulting URL string. Otherwise, the element's\n track URL is the empty string.\nIf the element's track URL identifies a WebVTT resource, and the element's kind attribute is not in the chapters metadata or metadata state, then the WebVTT file must be a\n WebVTT file using cue text. [WEBVTT]\nThe srclang\n attribute gives the language of the text track data. The value must be a valid BCP 47 language\n tag. This attribute must be present if the element's kind\n attribute is in the subtitles state. [BCP47]\nIf the element has a srclang attribute whose value is\n not the empty string, then the element's track language is the value of the attribute.\n Otherwise, the element has no track language.\nThe label attribute\n gives a user-readable title for the track. This title is used by user agents when listing subtitle, caption, and audio description tracks in their user interface.\nThe value of the label attribute, if the attribute is\n present, must not be the empty string. Furthermore, there must not be two track\n element children of the same media element whose kind attributes are in the same state, whose srclang attributes are both missing or have values that\n represent the same language, and whose label attributes are\n again both missing or both have the same value.\nIf the element has a label attribute whose value is not\n the empty string, then the element's track label is the value of the attribute.\n Otherwise, the element's track label is an empty string.\nThe default\n attribute is a boolean attribute, which, if specified, indicates that the track is to\n be enabled if the user's preferences do not indicate that another track would be more\n appropriate.\nEach media element must have no more than one track element child\n whose kind attribute is in the subtitles or captions state and whose default attribute is specified.\nEach media element must have no more than one track element child\n whose kind attribute is in the description state and whose default attribute is specified.\nEach media element must have no more than one track element child\n whose kind attribute is in the chapters metadata state and whose default attribute is specified.\nThe readyState attribute must return the numeric value\n corresponding to the text track readiness state of the track element's\n text track, as defined by the following list:\nNONE (numeric value 0)The text track not loaded state.LOADING (numeric value 1)The text track loading state.LOADED (numeric value 2)The text track loaded state.ERROR (numeric value 3)The text track failed to load state.\nThe track IDL\n attribute must, on getting, return the track element's text track's\n corresponding TextTrack object.\nThe src, srclang, label, and default IDL\n attributes must reflect the respective content attributes of the same name. The kind IDL attribute\n must reflect the content attribute of the same name, limited to only known\n values.","num":"4.8.10","tag":"track"},{"description":"The map element, in conjunction with an img element and any\n area element descendants, defines an image map. The element\n represents its children.\nThe name attribute gives\n the map a name so that it can be referenced. The attribute must be present and must\n have a non-empty value with no ASCII whitespace. The value of the name attribute must not be equal to the value of the name attribute of another map element in the same\n tree. If the id attribute is also specified, both\n attributes must have the same value.\nThe areas\n attribute must return an HTMLCollection rooted at the map element, whose\n filter matches only area elements.\nThe IDL attribute name must reflect the content attribute of the\n same name.","num":"4.8.12","tag":"map"},{"description":"The area element represents either a hyperlink with some text and a\n corresponding area on an image map, or a dead area on an image map.\nAn area element with a parent node must have a map element\n ancestor.\nIf the area element has an href\n attribute, then the area element represents a hyperlink. In this case,\n the alt attribute must be\n present. It specifies the text of the hyperlink. Its value must be text that, when presented with\n the texts specified for the other hyperlinks of the image map, and with the\n alternative text of the image, but without the image itself, provides the user with the same kind\n of choice as the hyperlink would when used without its text but with its shape applied to the\n image. The alt attribute may be left blank if there is another\n area element in the same image map that points to the same resource and\n has a non-blank alt attribute.\nIf the area element has no href\n attribute, then the area represented by the element cannot be selected, and the alt attribute must be omitted.\nIn both cases, the shape and coords attributes specify the area.\nThe shape attribute is\n an enumerated attribute. The following table lists the keywords defined for this\n attribute. The states given in the first cell of the rows with keywords give the states to which\n those keywords map. Some of the keywords are non-conforming, as noted in the last\n column.\nState\n Keywords\n Notes\n Circle state\n circle\n \n circ\n Non-conforming\n Default state\n default\n \n Polygon state\n poly\n \n polygon\n Non-conforming\n Rectangle state\n rect\n \n rectangle\n Non-conforming\n \nThe attribute may be omitted. The missing value default\n and invalid value default are the rectangle state.\nThe coords attribute\n must, if specified, contain a valid list of floating-point numbers. This attribute\n gives the coordinates for the shape described by the shape\n attribute. The processing for this attribute is described as part of the image\n map processing model.\nIn the circle state,\n area elements must have a coords attribute\n present, with three integers, the last of which must be non-negative. The first integer must be\n the distance in CSS pixels from the left edge of the image to the\n center of the circle, the second integer must be the distance in CSS\n pixels from the top edge of the image to the center of the circle, and the third integer\n must be the radius of the circle, again in CSS pixels.\nIn the default state\n state, area elements must not have a coords\n attribute. (The area is the whole image.)\nIn the polygon state,\n area elements must have a coords attribute\n with at least six integers, and the number of integers must be even. Each pair of integers must\n represent a coordinate given as the distances from the left and the top of the image in CSS pixels respectively, and all the coordinates together must represent the\n points of the polygon, in order.\nIn the rectangle state,\n area elements must have a coords attribute\n with exactly four integers, the first of which must be less than the third, and the second of\n which must be less than the fourth. The four points must represent, respectively, the distance\n from the left edge of the image to the left side of the rectangle, the distance from the top edge\n to the top side, the distance from the left edge to the right side, and the distance from the top\n edge to the bottom side, all in CSS pixels.\nWhen user agents allow users to follow hyperlinks or\n download hyperlinks created using the\n area element, as described in the next section, the href, target, download, and ping\n attributes decide how the link is followed. The rel\n attribute may be used to indicate to the user the likely nature of the target resource before the\n user follows the link.\nThe target, download, ping,\n rel, and referrerpolicy attributes must be omitted if the\n href attribute is not present.\nIf the itemprop attribute is specified on an\n area element, then the href attribute must\n also be specified.\nThe activation behavior of an area element element is:\nIf element has no href attribute,\n then return.If element has a download\n attribute, or if the user has expressed a preference to download the hyperlink, then download the hyperlink created by\n element.Otherwise, follow the hyperlink created by\n element.\nThe IDL attributes alt, coords, target, download, ping, and rel, each must reflect the respective content\n attributes of the same name.\nThe IDL attribute shape must reflect the shape content attribute.\nThe IDL attribute relList must reflect the rel content attribute.\nThe IDL attribute referrerPolicy must reflect the referrerpolicy content attribute, limited to\n only known values.","num":"4.8.13","tag":"area"},{"description":"The table element represents data with more than one dimension, in\n the form of a table.\nThe table element takes part in the table\n model. Tables have rows, columns, and cells given by their descendants. The rows and\n columns form a grid; a table's cells must completely cover that grid without overlap.\nAuthors are encouraged to provide information describing how to interpret complex tables.\n Guidance on how to provide such information is given\n below.\nTables must not be used as layout aids. Historically, some web authors have misused tables in\n HTML as a way to control their page layout. This usage is non-conforming, because tools attempting\n to extract tabular data from such documents would obtain very confusing results. In particular,\n users of accessibility tools like screen readers are likely to find it very difficult to navigate\n pages with tables used for layout.\nTables can be complicated to understand and navigate. To help users with this, user agents\n should clearly delineate cells in a table from each other, unless the user agent has classified\n the table as a (non-conforming) layout table.\nUser agents, especially those that do table analysis on arbitrary content, are encouraged to\n find heuristics to determine which tables actually contain data and which are merely being used\n for layout. This specification does not define a precise heuristic, but the following are\n suggested as possible indicators:\nFeature\n Indication\n The use of the role attribute with the value presentation\n Probably a layout table\n The use of the non-conforming border attribute with the non-conforming value 0\n Probably a layout table\n The use of the non-conforming cellspacing and\n cellpadding attributes with the value 0\n Probably a layout table\n The use of caption, thead, or th elements\n Probably a non-layout table\n The use of the headers and scope attributes\n Probably a non-layout table\n The use of the non-conforming border attribute with a value other than 0\n Probably a non-layout table\n Explicit visible borders set using CSS\n Probably a non-layout table\n The use of the summary attribute\n Not a good indicator (both layout and non-layout tables have historically been given this attribute)\n \nIf a table element has a (non-conforming) summary attribute, and the user agent has not classified the\n table as a layout table, the user agent may report the contents of that attribute to the user.\nIn all of the following attribute and method definitions, when an element is to be\n table-created, that means to create an element given the\n table element's node document, the given local name, and the HTML\n namespace.\nThe caption\n IDL attribute must return, on getting, the first caption element child of the\n table element, if any, or null otherwise. On setting, the first caption\n element child of the table element, if any, must be removed, and the new value, if\n not null, must be inserted as the first node of the table element.\nThe createCaption() method must return the first\n caption element child of the table element, if any; otherwise a new\n caption element must be table-created, inserted as the first node of the\n table element, and then returned.\nThe deleteCaption() method must remove the first\n caption element child of the table element, if any.\nThe tHead IDL\n attribute must return, on getting, the first thead element child of the\n table element, if any, or null otherwise. On setting, if the new value is null or a\n thead element, the first thead element child of the table\n element, if any, must be removed, and the new value, if not null, must be inserted immediately\n before the first element in the table element that is neither a caption\n element nor a colgroup element, if any, or at the end of the table if there are no\n such elements. If the new value is neither null nor a thead element, then a\n \"HierarchyRequestError\" DOMException must be thrown\n instead.\nThe createTHead() method must return the first\n thead element child of the table element, if any; otherwise a new\n thead element must be table-created and inserted immediately before the\n first element in the table element that is neither a caption element nor\n a colgroup element, if any, or at the end of the table if there are no such elements,\n and then that new element must be returned.\nThe deleteTHead() method must remove the first\n thead element child of the table element, if any.\nThe tFoot IDL\n attribute must return, on getting, the first tfoot element child of the\n table element, if any, or null otherwise. On setting, if the new value is null or a\n tfoot element, the first tfoot element child of the table\n element, if any, must be removed, and the new value, if not null, must be inserted at the end of\n the table. If the new value is neither null nor a tfoot element, then a\n \"HierarchyRequestError\" DOMException must be thrown\n instead.\nThe createTFoot() method must return the first\n tfoot element child of the table element, if any; otherwise a new\n tfoot element must be table-created and inserted at the end of the\n table, and then that new element must be returned.\nThe deleteTFoot() method must remove the first\n tfoot element child of the table element, if any.\nThe tBodies\n attribute must return an HTMLCollection rooted at the table node, whose\n filter matches only tbody elements that are children of the table\n element.\nThe createTBody() method must table-create a new tbody element, insert it immediately\n after the last tbody element child in the table element, if any, or at\n the end of the table element if the table element has no\n tbody element children, and then must return the new tbody element.\nThe rows\n attribute must return an HTMLCollection rooted at the table node, whose\n filter matches only tr elements that are either children of the table\n element, or children of thead, tbody, or tfoot elements\n that are themselves children of the table element. The elements in the collection\n must be ordered such that those elements whose parent is a thead are included first,\n in tree order, followed by those elements whose parent is either a table\n or tbody element, again in tree order, followed finally by those\n elements whose parent is a tfoot element, still in tree order.\nThe behavior of the insertRow(index) method depends on the state\n of the table. When it is called, the method must act as required by the first item in the\n following list of conditions that describes the state of the table and the index\n argument:\nIf index is less than −1 or greater than the number of elements\n in rows collection:The method must throw an \"IndexSizeError\"\n DOMException.If the rows collection has zero elements in it, and the\n table has no tbody elements in it:The method must table-create a tbody\n element, then table-create a tr element, then\n append the tr element to the tbody element, then append the\n tbody element to the table element, and finally return the\n tr element.If the rows collection has zero elements in it:The method must table-create a tr element,\n append it to the last tbody element in the table, and return the tr\n element.If index is −1 or equal to the number of items in rows collection:The method must table-create a tr element,\n and append it to the parent of the last tr element in the rows collection. Then, the newly created tr element\n must be returned.Otherwise:The method must table-create a tr element,\n insert it immediately before the indexth tr element in the rows collection, in the same parent, and finally must return the\n newly created tr element.\nWhen the deleteRow(index) method is called, the user\n agent must run the following steps:\nIf index is less than −1 or greater than or equal to the number of\n elements in the rows collection, then throw an\n \"IndexSizeError\" DOMException.If index is −1, then remove\n the last element in the rows collection from its parent, or\n do nothing if the rows collection is empty.Otherwise, remove the indexth element\n in the rows collection from its parent.","num":"4.9.1","tag":"table"},{"description":"The caption element represents the title of the table\n that is its parent, if it has a parent and that is a table element.\nThe caption element takes part in the table model.\nWhen a table element is the only content in a figure element other\n than the figcaption, the caption element should be omitted in favor of\n the figcaption.\nA caption can introduce context for a table, making it significantly easier to understand.","num":"4.9.2","tag":"caption"},{"description":"The colgroup element represents a group of one or more columns in the table that is its parent, if it has a\n parent and that is a table element.\nIf the colgroup element contains no col elements, then the element\n may have a span\n content attribute specified, whose value must be a valid non-negative integer greater\n than zero and less than or equal to 1000.\nThe colgroup element and its span\n attribute take part in the table model.\nThe span\n IDL attribute must reflect the content attribute of the same name. It is\n clamped to the range [1, 1000], and its default value is 1.","num":"4.9.3","tag":"colgroup"},{"description":"If a col element has a parent and that is a colgroup element that\n itself has a parent that is a table element, then the col element\n represents one or more columns in the column group represented by that colgroup.\nThe element may have a span content attribute specified, whose value must be a\n valid non-negative integer greater than zero and less than or equal to 1000.\nThe col element and its span attribute take\n part in the table model.\nThe span IDL\n attribute must reflect the content attribute of the same name. It is clamped to\n the range [1, 1000], and its default value is 1.","num":"4.9.4","tag":"col"},{"description":"The tbody element represents a block of rows that consist of a\n body of data for the parent table element, if the tbody element has a\n parent and it is a table.\nThe tbody element takes part in the table model.\nThe rows attribute must return an HTMLCollection\n rooted at this element, whose filter matches only tr elements that are children of\n this element.\nThe insertRow(index) method must act as\n follows:\nIf index is less than −1 or greater than the number of elements in the\n rows collection, throw an\n \"IndexSizeError\" DOMException.Let table row be the result of creating an\n element given this element's node document, tr, and the\n HTML namespace.If index is −1 or equal to the number of items in the rows collection, then append table row to this element.Otherwise, insert table row as a\n child of this element, immediately before the indexth tr element in the\n rows collection.Return table row.\nThe deleteRow(index) method must, when invoked,\n act as follows:\n \n \nIf index is less than −1 or greater than or equal to the number of\n elements in the rows collection, then throw an\n \"IndexSizeError\" DOMException.If index is −1, then remove\n the last element in the rows collection from this\n element, or do nothing if the rows collection is\n empty.Otherwise, remove the indexth element\n in the rows collection from this element.","num":"4.9.5","tag":"tbody"},{"description":"The thead element represents the block of rows that consist of\n the column labels (headers) for the parent table element, if the thead\n element has a parent and it is a table.\nThe thead element takes part in the table model.","num":"4.9.6","tag":"thead"},{"description":"The tfoot element represents the block of rows that consist of\n the column summaries (footers) for the parent table element, if the\n tfoot element has a parent and it is a table.\nThe tfoot element takes part in the table\n model.","num":"4.9.7","tag":"tfoot"},{"description":"The tr element represents a row of\n cells in a table.\nThe tr element takes part in the table model.\nThe rowIndex attribute must, if this element has a parent\n table element, or a parent tbody, thead, or\n tfoot element and a grandparent table element, return the index\n of this tr element in that table element's rows collection. If there is no such table element,\n then the attribute must return −1.\nThe sectionRowIndex attribute must, if this element has a\n parent table, tbody, thead, or tfoot element,\n return the index of the tr element in the parent element's rows collection (for tables, that's HTMLTableElement's rows collection; for table sections, that's\n HTMLTableSectionElement's rows\n collection). If there is no such parent element, then the attribute must return −1.\nThe cells\n attribute must return an HTMLCollection rooted at this tr element, whose\n filter matches only td and th elements that are children of the\n tr element.\nThe insertCell(index) method must act as\n follows:\nIf index is less than −1 or greater than the number of elements in\n the cells collection, then throw an\n \"IndexSizeError\" DOMException.Let table cell be the result of creating an\n element given this tr element's node document, td,\n and the HTML namespace.If index is equal to −1 or equal to the number of items in cells collection, then append table cell to this tr\n element.Otherwise, insert table cell as a\n child of this tr element, immediately before the indexth td\n or th element in the cells collection.Return table cell.\nThe deleteCell(index) method must act as\n follows:\nIf index is less than −1 or greater than or equal to the number of\n elements in the cells collection, then throw an\n \"IndexSizeError\" DOMException.If index is −1, then remove\n the last element in the cells collection from its\n parent, or do nothing if the cells collection is\n empty.Otherwise, remove the indexth element\n in the cells collection from its parent.","num":"4.9.8","tag":"tr"},{"description":"The td element represents a data cell in a table.\nThe td element and its colspan, rowspan, and headers\n attributes take part in the table model.\nUser agents, especially in non-visual environments or where displaying the table as a 2D grid\n is impractical, may give the user context for the cell when rendering the contents of a cell; for\n instance, giving its position in the table model, or listing the cell's header cells\n (as determined by the algorithm for assigning header cells). When a cell's header\n cells are being listed, user agents may use the value of abbr\n attributes on those header cells, if any, instead of the contents of the header cells\n themselves.","num":"4.9.9","tag":"td"},{"description":"The th element represents a header cell in a table.\nThe th element may have a scope content attribute specified. The scope attribute is an enumerated attribute with five\n states, four of which have explicit keywords:\nThe row keyword,\n which maps to the row stateThe row state means the header cell applies to some of the subsequent cells in the\n same row(s).The col keyword,\n which maps to the column stateThe column state means the header cell applies to some of the subsequent cells in the\n same column(s).The rowgroup keyword, which maps to the row group\n stateThe row group state means the header cell applies to all the remaining cells in the\n row group. A th element's scope attribute must\n not be in the row group state if the element is not\n anchored in a row group.The colgroup keyword, which maps to the column\n group stateThe column group state means the header cell applies to all the remaining cells in the\n column group. A th element's scope attribute must\n not be in the column group state if the element is\n not anchored in a column group.The auto stateThe auto state makes the header cell apply to a set of cells selected based on\n context.\nThe scope attribute's missing value default and invalid value default\n are the auto state.\nThe th element may have an abbr content attribute specified. Its value must be an\n alternative label for the header cell, to be used when referencing the cell in other contexts\n (e.g. when describing the header cells that apply to a data cell). It is typically an abbreviated\n form of the full header cell, but can also be an expansion, or merely a different phrasing.\nThe th element and its colspan, rowspan, headers, and\n scope attributes take part in the table model.","num":"4.9.10","tag":"th"},{"description":"The form element represents a hyperlink that can be\n manipulated through a collection of form-associated\n elements, some of which can represent editable values that can be submitted to a server for\n processing.\nThe accept-charset attribute gives the character\n encodings that are to be used for the submission. If specified, the value must be an ASCII\n case-insensitive match for \"UTF-8\". [ENCODING]\nThe name attribute\n represents the form's name within the forms\n collection. The value must not be the empty string, and the value must be unique amongst the\n form elements in the forms collection that\n it is in, if any.\nThe autocomplete attribute is an enumerated\n attribute. The attribute has two states. The on keyword maps to the on state, and the off keyword maps to the off state. The attribute may also be omitted. The\n missing value default and the invalid value default are the on state. The off state indicates that by default, form\n controls in the form will have their autofill field name set to \"off\"; the on state indicates that by default, form controls\n in the form will have their autofill field name set to \"on\".\nThe action, enctype,\n method, novalidate,\n and target attributes are attributes for form\n submission.\nThe rel attribute on\n form elements controls what kinds of links the elements create. The attribute's value\n must be a unordered set of unique space-separated tokens. The allowed keywords and their meanings are defined in an earlier section.\nrel's supported\n tokens are the keywords defined in HTML link types which are\n allowed on form elements, impact the processing model, and are supported by the user\n agent. The possible supported tokens are noreferrer, noopener, and opener. rel's supported tokens must only include the tokens from this\n list that the user agent implements the processing model for.\nThe autocomplete IDL attribute must reflect\n the content attribute of the same name, limited to only known values.\nThe name and\n rel IDL attributes\n must reflect the content attribute of the same name.\nThe acceptCharset IDL attribute must reflect\n the accept-charset content attribute.\nThe relList\n IDL attribute must reflect the rel content\n attribute.\nThe elements\n IDL attribute must return an HTMLFormControlsCollection rooted at the\n form element's root, whose filter matches listed elements whose form owner is the\n form element, with the exception of input elements whose type attribute is in the Image Button state, which must, for historical reasons, be\n excluded from this particular collection.\nThe length IDL\n attribute must return the number of nodes represented by the elements\n collection.\nThe supported property indices at any instant are the indices supported by the\n object returned by the elements attribute at that\n instant.\nTo determine the value of an indexed property for a\n form element, the user agent must return the value returned by the item method on the elements collection, when invoked with the given index as its\n argument.\nEach form element has a mapping of names to elements called the past names\n map. It is used to persist names of controls even when they change names.\nThe supported property names consist of the names obtained from the following\n algorithm, in the order obtained from this algorithm:\nLet sourced names be an initially empty ordered list of tuples\n consisting of a string, an element, a source, where the source is either id, name,\n or past, and, if the source is past, an age.\n For each listed element candidate\n whose form owner is the form element, with the exception of any\n input elements whose type attribute is in the\n Image Button state:\n \n If candidate has an id attribute, add\n an entry to sourced names with that id\n attribute's value as the string, candidate as the element, and id as\n the source.If candidate has a name attribute,\n add an entry to sourced names with that name attribute's value as the string, candidate\n as the element, and name as the source.\n \n For each img element candidate whose form owner is the\n form element:\n \n If candidate has an id attribute, add\n an entry to sourced names with that id\n attribute's value as the string, candidate as the element, and id as\n the source.If candidate has a name attribute,\n add an entry to sourced names with that name attribute's value as the string, candidate\n as the element, and name as the source.\n \n For each entry past entry in the past names map add an entry\n to sourced names with the past entry's name as the\n string, past entry's element as the element, past as the source, and\n the length of time past entry has been in the past names map as\n the age.\n Sort sourced names by tree order of the element entry of\n each tuple, sorting entries with the same element by putting entries whose source is id\n first, then entries whose source is name, and finally entries whose source is past,\n and sorting entries with the same element and source by their age, oldest first.Remove any entries in sourced names that have the empty string as\n their name.Remove any entries in sourced names that have the same name as an\n earlier entry in the map.Return the list of names from sourced names, maintaining their\n relative order.\nTo determine the value of a named property name\n for a form element, the user agent must run the following steps:\nLet candidates be a live RadioNodeList object\n containing all the listed elements, whose form\n owner is the form element, that have either an id attribute or a name attribute equal\n to name, with the exception of input elements whose type attribute is in the Image Button state, in tree order.If candidates is empty, let candidates be a live\n RadioNodeList object containing all the img elements, whose form\n owner is the form element, that have either an id attribute or a name attribute\n equal to name, in tree order.If candidates is empty, name is the name of one of\n the entries in the form element's past names map: return the object\n associated with name in that map.If candidates contains more than one node, return candidates.Otherwise, candidates contains exactly one node. Add a mapping from\n name to the node in candidates in the form\n element's past names map, replacing the previous entry with the same name, if\n any.Return the node in candidates.\nIf an element listed in a form element's past names map changes\n form owner, then its entries must be removed from that map.\nThe submit()\n method, when invoked, must submit the form\n element from the form element itself, with the submitted from submit() method flag set.\nThe requestSubmit(submitter) method, when\n invoked, must run the following steps:\n\n If submitter is not null, then:\n \n If submitter is not a submit\n button, then throw a TypeError.If submitter's form owner is not this form element,\n then throw a \"NotFoundError\" DOMException.\n Otherwise, set submitter to this form element.Submit this form element, from\n submitter.\nThe reset()\n method, when invoked, must run the following steps:\nIf the form element is marked as locked for reset, then return.Mark the form element as locked for reset.Reset the form element.Unmark the form element as locked for reset.\nIf the checkValidity() method is invoked, the user agent\n must statically validate the constraints of the form element, and return\n true if the constraint validation return a positive result, and false if it returned a\n negative result.\nIf the reportValidity() method is invoked, the user agent\n must interactively validate the constraints of the form element, and\n return true if the constraint validation return a positive result, and false if it returned\n a negative result.","num":"4.10.3","tag":"form"},{"description":"The label element represents a caption in a user interface. The\n caption can be associated with a specific form control, known as the\n label element's labeled control, either using the for attribute, or by putting the form control inside the\n label element itself.\nExcept where otherwise specified by the following rules, a label element has no\n labeled control.\nThe for attribute may\n be specified to indicate a form control with which the caption is to be associated. If the\n attribute is specified, the attribute's value must be the ID of a\n labelable element in the same tree as the\n label element. If the attribute is specified and there is an element in\n the tree whose ID is equal to the value of the for attribute, and the first such element in tree\n order is a labelable element, then that element is the\n label element's labeled control.\nIf the for attribute is not specified, but the\n label element has a labelable element descendant,\n then the first such descendant in tree order is the label element's\n labeled control.\nThe label element's exact default presentation and behavior, in particular what\n its activation behavior might be, if anything, should match the platform's label\n behavior. The activation behavior of a label element for events targeted\n at interactive content descendants of a label element, and any\n descendants of those interactive content descendants, must be to do nothing.\nThe htmlFor\n IDL attribute must reflect the for content\n attribute.\nThe control\n IDL attribute must return the label element's labeled control, if any,\n or null if there isn't one.\nThe form IDL\n attribute must run the following steps:\nIf the label element has no labeled control, then return\n null.If the label element's labeled control is not a\n form-associated element, then return null.Return the label element's labeled control's form\n owner (which can still be null).\nLabelable elements and all input elements\n have a live NodeList object associated with them that represents the\n list of label elements, in tree order, whose labeled\n control is the element in question. The labels IDL attribute of labelable elements that are not form-associated custom elements, and the labels IDL attribute of input elements, on getting,\n must return that NodeList object, and that same value must always be returned, unless\n this element is an input element whose type\n attribute is in the Hidden state, in which case it\n must instead return null.\nForm-associated custom elements don't have\n a labels IDL attribute. Instead, their\n ElementInternals object has a labels IDL attribute. On getting, it must throw\n a \"NotSupportedError\" DOMException if the target element is not a form-associated custom\n element. Otherwise, it must return that NodeList object, and that same value\n must always be returned.","num":"4.10.4","tag":"label"},{"description":"The input element represents a typed data field, usually with a form\n control to allow the user to edit the data.\nThe type attribute\n controls the data type (and associated control) of the element. It is an enumerated\n attribute. The following table lists the keywords and states for the attribute — the\n keywords in the left column map to the states in the cell in the second column on the same row as\n the keyword.\n Keyword\n State\n Data type\n Control type\n hidden\n Hidden\n An arbitrary string\n n/a\n text\n Text\n Text with no line breaks\n A text control\n search\n Search\n Text with no line breaks\n Search control\n tel\n Telephone\n Text with no line breaks\n A text control\n url\n URL\n An absolute URL\n A text control\n email\n Email\n An email address or list of email addresses\n A text control\n password\n Password\n Text with no line breaks (sensitive information)\n A text control that obscures data entry\n date\n Date\n A date (year, month, day) with no time zone\n A date control\n month\n Month\n A date consisting of a year and a month with no time zone\n A month control\n week\n Week\n A date consisting of a week-year number and a week number with no time zone\n A week control\n time\n Time\n A time (hour, minute, seconds, fractional seconds) with no time zone\n A time control\n datetime-local\n Local Date and Time\n A date and time (year, month, day, hour, minute, second, fraction of a second) with no time zone\n A date and time control\n number\n Number\n A numerical value\n A text control or spinner control\n range\n Range\n A numerical value, with the extra semantic that the exact value is not important\n A slider control or similar\n color\n Color\n An sRGB color with 8-bit red, green, and blue components\n A color picker\n checkbox\n Checkbox\n A set of zero or more values from a predefined list\n A checkbox\n radio\n Radio Button\n An enumerated value\n A radio button\n file\n File Upload\n Zero or more files each with a MIME type and optionally a filename\n A label and a button\n submit\n Submit Button\n An enumerated value, with the extra semantic that it must be the last value selected and initiates form submission\n A button\n image\n Image Button\n A coordinate, relative to a particular image's size, with the extra semantic that it must\n be the last value selected and initiates form submission\n Either a clickable image, or a button\n reset\n Reset Button\n n/a\n A button\n button\n Button\n n/a\n A button\n \nThe missing value default and the invalid value default are the Text state.\nWhich of the\n accept,\n alt,\n autocomplete,\n checked,\n dirname,\n formaction,\n formenctype,\n formmethod,\n formnovalidate,\n formtarget,\n height,\n list,\n max,\n maxlength,\n min,\n minlength,\n multiple,\n pattern,\n placeholder,\n readonly,\n required,\n size,\n src,\n step, and\n width content attributes, the\n checked,\n files,\n valueAsDate,\n valueAsNumber, and\n list IDL attributes, the\n select() method, the\n selectionStart,\n selectionEnd, and\n selectionDirection, IDL attributes, the\n setRangeText() and\n setSelectionRange() methods, the\n stepUp() and\n stepDown() methods, and the\n input and\n change events apply to an\n input element depends on the state of its\n type attribute.\n The subsections that define each type also clearly define in normative \"bookkeeping\" sections\n which of these feature apply, and which do not apply, to each type. The behavior of\n these features depends on whether they apply or not, as defined in their various sections (q.v.\n for content attributes, for APIs, for events).\nThe following table is non-normative and summarizes which of those\n content attributes, IDL attributes, methods, and events apply to each state:\n\n Hidden\n Text,\n Search\n URL,\n Telephone\n Email\n Password\n Date,\n Month,\n Week,\n Time\n Local Date and Time\n Number\n Range\n Color\n Checkbox,\n Radio Button\n File Upload\n Submit Button\n Image Button\n Reset Button,\n Button\n \n Content attributes\n \n accept\n · \n · \n \n · \n · \n · \n · \n \n \n \n · \n · \n · \n · \n · \n \n Yes \n · \n · \n · \n \n \n alt\n · \n · \n \n · \n · \n · \n · \n \n \n \n · \n · \n · \n · \n · \n \n · \n · \n Yes \n · \n \n \n autocomplete\n Yes \n Yes \n \n Yes \n Yes \n Yes \n Yes \n \n \n \n Yes \n Yes \n Yes \n Yes \n · \n \n · \n · \n · \n · \n \n \n checked\n · \n · \n \n · \n · \n · \n · \n \n \n \n · \n · \n · \n · \n Yes \n \n · \n · \n · \n · \n \n \n dirname\n · \n Yes \n \n · \n · \n · \n · \n \n \n \n · \n · \n · \n · \n · \n \n · \n · \n · \n · \n \n \n formaction\n · \n · \n \n · \n · \n · \n · \n \n \n \n · \n · \n · \n · \n · \n \n · \n Yes \n Yes \n · \n \n \n formenctype\n · \n · \n \n · \n · \n · \n · \n \n \n \n · \n · \n · \n · \n · \n \n · \n Yes \n Yes \n · \n \n \n formmethod\n · \n · \n \n · \n · \n · \n · \n \n \n \n · \n · \n · \n · \n · \n \n · \n Yes \n Yes \n · \n \n \n formnovalidate\n · \n · \n \n · \n · \n · \n · \n \n \n \n · \n · \n · \n · \n · \n \n · \n Yes \n Yes \n · \n \n \n formtarget\n · \n · \n \n · \n · \n · \n · \n \n \n \n · \n · \n · \n · \n · \n \n · \n Yes \n Yes \n · \n \n \n height\n · \n · \n \n · \n · \n · \n · \n \n \n \n · \n · \n · \n · \n · \n \n · \n · \n Yes \n · \n \n \n list\n · \n Yes \n \n Yes \n Yes \n · \n Yes \n \n \n \n Yes \n Yes \n Yes \n Yes \n · \n \n · \n · \n · \n · \n \n \n max\n · \n · \n \n · \n · \n · \n Yes \n \n \n \n Yes \n Yes \n Yes \n · \n · \n \n · \n · \n · \n · \n \n \n maxlength\n · \n Yes \n \n Yes \n Yes \n Yes \n · \n \n \n \n · \n · \n · \n · \n · \n \n · \n · \n · \n · \n \n \n min\n · \n · \n \n · \n · \n · \n Yes \n \n \n \n Yes \n Yes \n Yes \n · \n · \n \n · \n · \n · \n · \n \n \n minlength\n · \n Yes \n \n Yes \n Yes \n Yes \n · \n \n \n \n · \n · \n · \n · \n · \n \n · \n · \n · \n · \n \n \n multiple\n · \n · \n \n · \n Yes \n · \n · \n \n \n \n · \n · \n · \n · \n · \n \n Yes \n · \n · \n · \n \n \n pattern\n · \n Yes \n \n Yes \n Yes \n Yes \n · \n \n \n \n · \n · \n · \n · \n · \n \n · \n · \n · \n · \n \n \n placeholder\n · \n Yes \n \n Yes \n Yes \n Yes \n · \n \n \n \n · \n Yes \n · \n · \n · \n \n · \n · \n · \n · \n \n \n readonly\n · \n Yes \n \n Yes \n Yes \n Yes \n Yes \n \n \n \n Yes \n Yes \n · \n · \n · \n \n · \n · \n · \n · \n \n \n required\n · \n Yes \n \n Yes \n Yes \n Yes \n Yes \n \n \n \n Yes \n Yes \n · \n · \n Yes \n \n Yes \n · \n · \n · \n \n \n size\n · \n Yes \n \n Yes \n Yes \n Yes \n · \n \n \n \n · \n · \n · \n · \n · \n \n · \n · \n · \n · \n \n \n src\n · \n · \n \n · \n · \n · \n · \n \n \n \n · \n · \n · \n · \n · \n \n · \n · \n Yes \n · \n \n \n step\n · \n · \n \n · \n · \n · \n Yes \n \n \n \n Yes \n Yes \n Yes \n · \n · \n \n · \n · \n · \n · \n \n \n width\n · \n · \n \n · \n · \n · \n · \n \n \n \n · \n · \n · \n · \n · \n \n · \n · \n Yes \n · \n \n \n IDL attributes and methods\n \n checked\n · \n · \n \n · \n · \n · \n · \n \n \n \n · \n · \n · \n · \n Yes \n \n · \n · \n · \n · \n \n \n files\n · \n · \n \n · \n · \n · \n · \n \n \n \n · \n · \n · \n · \n · \n \n Yes \n · \n · \n · \n \n \n value\n default \n value \n \n value \n value \n value \n value \n \n \n \n value \n value \n value \n value \n default/on \n \n filename \n default \n default \n default \n \n \n valueAsDate\n · \n · \n \n · \n · \n · \n Yes \n \n \n \n · \n · \n · \n · \n · \n \n · \n · \n · \n · \n \n \n valueAsNumber\n · \n · \n \n · \n · \n · \n Yes \n \n \n \n Yes \n Yes \n Yes \n · \n · \n \n · \n · \n · \n · \n \n \n list\n · \n Yes \n \n Yes \n Yes \n · \n Yes \n \n \n \n Yes \n Yes \n Yes \n Yes \n · \n \n · \n · \n · \n · \n \n \n select()\n · \n Yes \n \n Yes \n Yes† \n Yes \n Yes† \n \n \n \n Yes† \n Yes† \n · \n Yes† \n · \n \n Yes† \n · \n · \n · \n \n \n selectionStart\n · \n Yes \n \n Yes \n · \n Yes \n · \n \n \n \n · \n · \n · \n · \n · \n \n · \n · \n · \n · \n \n \n selectionEnd\n · \n Yes \n \n Yes \n · \n Yes \n · \n \n \n \n · \n · \n · \n · \n · \n \n · \n · \n · \n · \n \n \n selectionDirection\n · \n Yes \n \n Yes \n · \n Yes \n · \n \n \n \n · \n · \n · \n · \n · \n \n · \n · \n · \n · \n \n \n setRangeText()\n · \n Yes \n \n Yes \n · \n Yes \n · \n \n \n \n · \n · \n · \n · \n · \n \n · \n · \n · \n · \n \n \n setSelectionRange()\n · \n Yes \n \n Yes \n · \n Yes \n · \n \n \n \n · \n · \n · \n · \n · \n \n · \n · \n · \n · \n \n \n stepDown()\n · \n · \n \n · \n · \n · \n Yes \n \n \n \n Yes \n Yes \n Yes \n · \n · \n \n · \n · \n · \n · \n \n \n stepUp()\n · \n · \n \n · \n · \n · \n Yes \n \n \n \n Yes \n Yes \n Yes \n · \n · \n \n · \n · \n · \n · \n \n \n Events\n \n input event\n · \n Yes \n \n Yes \n Yes \n Yes \n Yes \n \n \n \n Yes \n Yes \n Yes \n Yes \n Yes \n \n Yes \n · \n · \n · \n \n \n change event\n · \n Yes \n \n Yes \n Yes \n Yes \n Yes \n \n \n \n Yes \n Yes \n Yes \n Yes \n Yes \n \n Yes \n · \n · \n · \n \n \n \n† If the control has no selectable text, the select() method results in a no-op, with no\n \"InvalidStateError\" DOMException.\nSome states of the type attribute define a value\n sanitization algorithm.\nEach input element has a value, which is\n exposed by the value IDL attribute. Some states define an\n algorithm to convert a string to a number,\n an algorithm to convert a number to a\n string, an algorithm to convert a string to a\n Date object, and an algorithm to\n convert a Date object to a string, which are used by max, min, step, valueAsDate,\n valueAsNumber, and stepUp().\nAn input element's dirty value flag must be\n set to true whenever the user interacts with the control in a way that changes the value. (It is also set to true when the value is programmatically\n changed, as described in the definition of the value IDL\n attribute.)\nThe value content\n attribute gives the default value of the input\n element. When the value content attribute is\n added, set, or removed, if the control's dirty value flag\n is false, the user agent must set the value of the element\n to the value of the value content attribute, if there is\n one, or the empty string otherwise, and then run the current value sanitization\n algorithm, if one is defined.\nEach input element has a checkedness,\n which is exposed by the checked IDL attribute.\nEach input element has a boolean dirty checkedness flag. When it is true, the\n element is said to have a dirty checkedness.\n The dirty checkedness flag must be initially\n set to false when the element is created, and must be set to true whenever the user interacts with\n the control in a way that changes the checkedness.\nThe checked\n content attribute is a boolean attribute that gives the default checkedness of the input element. When the checked content attribute is added, if\n the control does not have dirty checkedness, the user\n agent must set the checkedness of the element to true;\n when the checked content attribute is removed, if the\n control does not have dirty checkedness, the user\n agent must set the checkedness of the element to\n false.\nThe reset algorithm for input\n elements is to set the dirty value flag and dirty checkedness flag back to false, set the\n value of the element to the value of the value content attribute, if there is one, or the empty string\n otherwise, set the checkedness of the element to true if\n the element has a checked content attribute and false if\n it does not, empty the list of selected\n files, and then invoke the value sanitization algorithm, if the type attribute's current state defines one.\nEach input element can be mutable. Except where\n otherwise specified, an input element is always mutable. Similarly, except where otherwise specified, the user\n agent should not allow the user to modify the element's value or checkedness.\nWhen an input element is disabled, it is not mutable.\nThe cloning steps for input elements\n must propagate the value, dirty value flag, checkedness, and dirty checkedness flag from the node being cloned\n to the copy.\nThe activation behavior for input elements are these steps:\nIf this element is not mutable and is not in the Checkbox state and is not in the Radio state, then return.Run this element's input activation behavior, if any, and do nothing\n otherwise.\nThe legacy-pre-activation behavior for input elements are these\n steps:\nIf this element's type attribute is in the Checkbox state, then set this element's checkedness to its opposite value (i.e. true if it is false,\n false if it is true) and set this element's indeterminate IDL attribute to false.If this element's type attribute is in the Radio Button state, then get a reference to the element in\n this element's radio button group that has its checkedness set to true, if any, and then set this element's\n checkedness to true.\nThe legacy-canceled-activation behavior for input elements are these\n steps:\nIf the element's type attribute is in the Checkbox state, then set the element's checkedness and the element's indeterminate IDL attribute back to the values they had\n before the legacy-pre-activation behavior was run.If this element's type attribute is in the Radio Button state, then if the element to which a\n reference was obtained in the legacy-pre-activation behavior, if any, is still in\n what is now this element's radio button group, if it still has one, and if so,\n setting that element's checkedness to true; or else, if\n there was no such element, or that element is no longer in this element's radio button\n group, or if this element no longer has a radio button group, setting this\n element's checkedness to false.\n \nWhen an input element is first created, the element's rendering and behavior must\n be set to the rendering and behavior defined for the type\n attribute's state, and the value sanitization algorithm, if one is defined for the\n type attribute's state, must be invoked.\n\n \n When an input element's type attribute\n changes state, the user agent must run the following steps:\n \n If the previous state of the element's type attribute\n put the value IDL attribute in the value mode, and the element's value is not the empty string, and the new state of the element's\n type attribute puts the value IDL attribute in either the default mode or the default/on mode, then set the element's value content attribute to the element's value.Otherwise, if the previous state of the element's type attribute put the value\n IDL attribute in any mode other than the value mode, and the\n new state of the element's type attribute puts the value IDL attribute in the value mode, then set the value of the element to the value of the value content attribute, if there is one, or the empty string\n otherwise, and then set the control's dirty value flag to\n false.Otherwise, if the previous state of the element's type attribute put the value IDL attribute in any mode other than the filename mode, and the new state of the element's type attribute puts the value IDL attribute in the filename mode, then set the value of the element to the empty string.Update the element's rendering and behavior to the new state's.Signal a type change for the element. (The Radio Button state uses this, in particular.)Invoke the value sanitization algorithm, if one is defined for the type attribute's new state.Let previouslySelectable be true if setRangeText() previously applied to the element, and false otherwise.Let nowSelectable be true if setRangeText() now applies to the element, and false otherwise.If previouslySelectable is false and nowSelectable is true, set the\n element's text entry cursor position to the\n beginning of the text control, and set its selection\n direction to \"none\".\n \n \n\n The name attribute represents the element's name.\n The dirname attribute controls how the element's directionality is submitted.\n The disabled attribute is used to make the control non-interactive and to prevent its value from being submitted.\n The form attribute is used to explicitly associate the input element with its form owner.\n The autocomplete attribute controls how the user agent provides autofill behavior.\n \nThe indeterminate IDL attribute must initially be set to\n false. On getting, it must return the last value it was set to. On setting, it must be set to the\n new value. It has no effect except for changing the appearance of checkbox controls.\nThe accept,\n alt, max, min, multiple, pattern, placeholder, required, size, src, and step IDL attributes must\n reflect the respective content attributes of the same name. The dirName IDL attribute must\n reflect the dirname content attribute. The readOnly IDL\n attribute must reflect the readonly content\n attribute. The defaultChecked IDL attribute must\n reflect the checked content attribute. The\n defaultValue IDL attribute must reflect\n the value content attribute.\nThe type IDL\n attribute must reflect the respective content attribute of the same name,\n limited to only known values. The maxLength IDL attribute must reflect the\n maxlength content attribute, limited to only\n non-negative numbers. The minLength IDL attribute must reflect the\n minlength content attribute, limited to only\n non-negative numbers.\nThe IDL attributes width and height must return the rendered width and height of the\n image, in CSS pixels, if an image is being rendered, and\n is being rendered to a visual medium; or else the intrinsic\n width and height of the image, in CSS pixels, if an image is available but not being rendered to a visual medium; or else 0,\n if no image is available. When the input\n element's type attribute is not in the Image Button state, then no image is available. [CSS]\nOn setting, they must act as if they reflected the respective\n content attributes of the same name.\nThe willValidate, validity, and validationMessage IDL attributes, and the checkValidity(), reportValidity(), and setCustomValidity() methods, are part of the\n constraint validation API. The labels IDL\n attribute provides a list of the element's labels. The select(), selectionStart, selectionEnd, selectionDirection, setRangeText(), and setSelectionRange() methods and IDL attributes\n expose the element's text selection. The disabled,\n form, and name IDL attributes\n are part of the element's forms API.","num":"4.10.5","tag":"input"},{"description":"The button element represents a button labeled by its contents.\nThe element is a button.\nThe type attribute\n controls the behavior of the button when it is activated. It is an enumerated\n attribute. The following table lists the keywords and states for the attribute — the\n keywords in the left column map to the states in the cell in the second column on the same row as\n the keyword.\n Keyword\n State\n Brief description\n submit\n Submit Button\n Submits the form.\n reset\n Reset Button\n Resets the form.\n button\n Button\n Does nothing.\n \nThe missing value default and invalid value default are the Submit Button state.\nIf the type attribute is in the Submit Button state, the element is specifically a\n submit button.\nConstraint validation: If the type\n attribute is in the Reset Button state or the\n Button state, the element is barred from\n constraint validation.\nA button element element's activation behavior is:\nIf element is disabled, then\n return.If element does not have a form owner, then return.If element's node document is not fully active, then\n return.\n Switch on element's type attribute's state:\n \n Submit Button Submit element's form\n owner from element. Reset Button Reset element's form\n owner. Button\n Do nothing.\n \nThe form attribute is used to explicitly associate the\n button element with its form owner. The name attribute represents the element's name. The disabled attribute is used to make the control non-interactive and\n to prevent its value from being submitted. The formaction,\n formenctype, formmethod, formnovalidate, and formtarget attributes are attributes for form\n submission.\nThe formaction, formenctype, formmethod, formnovalidate, and formtarget must not be specified if the element's type attribute is not in the Submit Button state.\nThe value\n attribute gives the element's value for the purposes of form submission. The element's value is the value of the element's value attribute, if there is one, or the empty string\n otherwise.\nThe value\n IDL attribute must reflect the content attribute of the same name.\nThe type IDL\n attribute must reflect the content attribute of the same name, limited to only\n known values.\nThe willValidate, validity, and validationMessage IDL attributes, and the checkValidity(), reportValidity(), and setCustomValidity() methods, are part of the\n constraint validation API. The labels IDL\n attribute provides a list of the element's labels. The disabled, form, and\n name IDL attributes are part of the element's forms API.","num":"4.10.6","tag":"button"},{"description":"The select element represents a control for selecting amongst a set of\n options.\nThe multiple\n attribute is a boolean attribute. If the attribute is present, then the\n select element represents a control for selecting zero or more options\n from the list of options. If the attribute is\n absent, then the select element represents a control for selecting a\n single option from the list of options.\nThe size attribute\n gives the number of options to show to the user. The size\n attribute, if specified, must have a value that is a valid non-negative integer\n greater than zero.\nThe display size of a select element is the\n result of applying the rules for parsing non-negative integers to the value of\n element's size attribute, if it has one and parsing it is\n successful. If applying those rules to the attribute's value is not successful, or if the size attribute is absent, then the element's display size is 4 if the element's multiple content attribute is present, and 1 otherwise.\nThe list of options for a select\n element consists of all the option element children of the select\n element, and all the option element children of all the optgroup element\n children of the select element, in tree order.\nThe required\n attribute is a boolean attribute. When specified, the user will be required to select\n a value before submitting the form.\nIf a select element has a required\n attribute specified, does not have a multiple attribute\n specified, and has a display size of 1; and if the value of the first option element in the\n select element's list of options (if\n any) is the empty string, and that option element's parent node is the\n select element (and not an optgroup element), then that\n option is the select element's placeholder label option.\nIf a select element has a required\n attribute specified, does not have a multiple attribute\n specified, and has a display size of 1, then the\n select element must have a placeholder label option.\nConstraint validation: If the element has its required attribute specified, and either none of the\n option elements in the select element's list of options have their selectedness set to true, or the only\n option element in the select element's list of options with its selectedness set to true is the placeholder label\n option, then the element is suffering from being missing.\nIf the multiple attribute is absent, and the element\n is not disabled, then the user agent should allow the\n user to pick an option element in its list\n of options that is itself not disabled. Upon\n this option element being picked (either\n through a click, or through unfocusing the element after changing its value, or through a menu command, or through any other mechanism), and before the\n relevant user interaction event is queued (e.g. before the\n click event), the user agent must set the selectedness of the picked option element\n to true, set its dirtiness to true, and then\n send select update notifications.\nIf the multiple attribute is absent, whenever an\n option element in the select element's list of options has its selectedness set to true, and whenever an\n option element with its selectedness set to true is added to the\n select element's list of options,\n the user agent must set the selectedness of all\n the other option elements in its list of\n options to false.\nIf the multiple attribute is absent and the\n element's display size is greater than 1, then the user\n agent should also allow the user to request that the option whose selectedness is true, if any, be unselected. Upon this\n request being conveyed to the user agent, and before the relevant user interaction event is queued (e.g. before the click event), the user agent must set the selectedness of that option element to\n false, set its dirtiness to true, and then\n send select update notifications.\nThe selectedness setting algorithm, given a select element\n element, is to run the following steps:\nIf element's multiple attribute is\n absent, and element's display size is 1,\n and no option elements in the element's list of options have their selectedness set to true, then set the selectedness of the first option\n element in the list of options in\n tree order that is not disabled,\n if any, to true, and return.If element's multiple attribute is\n absent, and two or more option elements in element's list of options have their selectedness set to true, then set the selectedness of all but the last option\n element with its selectedness set to true in\n the list of options in tree order\n to false.\nThe option HTML element insertion\n steps, given insertedNode, are:\nIf insertedNode's parent is a select element, or\n insertedNode's parent is an optgroup element whose parent is a\n select element, then run that select element's selectedness\n setting algorithm.\nThe option HTML element removing\n steps, given removedNode and oldParent, are:\nIf oldParent is a select element, or oldParent is an\n optgroup element whose parent is a select element, then run that\n select element's selectedness setting algorithm.\nIf an option element in the list of\n options asks for a reset, then run that\n select element's selectedness setting algorithm.\nIf the multiple attribute is present, and the\n element is not disabled, then the user agent should\n allow the user to toggle the selectedness of the option elements in\n its list of options that are themselves not disabled. Upon such an element being toggled (either through a click, or through a menu command, or any other mechanism), and before the relevant user\n interaction event is queued (e.g. before a related click event), the selectedness of the option element must\n be changed (from true to false or false to true), the dirtiness of the element must be set to true, and the\n user agent must send select update notifications.\nWhen the user agent is to send select update notifications, queue\n an element task on the user interaction task source given the select\n element to run these steps:\nFire an event named input at the select element, with the bubbles and composed\n attributes initialized to true.Fire an event named change at the select element, with the bubbles attribute initialized to true.\nThe reset algorithm for select\n elements is to go through all the option elements in the element's list of options, set their selectedness to true if the option\n element has a selected attribute, and false otherwise,\n set their dirtiness to false, and then have the\n option elements ask for a reset.\n\n The form attribute is used to explicitly associate the select element with its form owner.\n The name attribute represents the element's name.\n The disabled attribute is used to make the control non-interactive and to prevent its value from being submitted.\n The autocomplete attribute controls how the user agent provides autofill behavior.\n \nA select element that is not disabled is\n mutable.\nThe type IDL\n attribute, on getting, must return the string \"select-one\" if the multiple attribute is absent, and the string \"select-multiple\" if the multiple\n attribute is present.\nThe options IDL attribute must return an\n HTMLOptionsCollection rooted at the select node, whose filter matches\n the elements in the list of options.\nThe options collection is also mirrored on the\n HTMLSelectElement object. The supported property indices at any instant\n are the indices supported by the object returned by the options attribute at that instant.\nThe length\n IDL attribute must return the number of nodes represented by the options collection.\n On setting, it must act like the attribute of the same name on the options collection.\nThe item(index) method must return the value returned\n by the method of the same name on the options collection, when invoked with the same argument.\nThe namedItem(name) method must return the value\n returned by the method of the same name on the\n options collection, when invoked with the same\n argument.\nWhen the user agent is to set the value of a new indexed\n property or set the value of an existing indexed property for a\n select element, it must instead run the\n corresponding algorithm on the select element's options collection.\nSimilarly, the add(element, before) method must act\n like its namesake method on that same options\n collection.\nThe remove()\n method must act like its namesake method on that same options collection when it has arguments, and like its namesake\n method on the ChildNode interface implemented by the HTMLSelectElement\n ancestor interface Element when it has no arguments.\nThe selectedOptions IDL attribute must return an\n HTMLCollection rooted at the select node, whose filter matches the\n elements in the list of options that have their\n selectedness set to true.\nThe selectedIndex IDL attribute, on getting, must\n return the index of the first option\n element in the list of options in tree\n order that has its selectedness set to\n true, if any. If there isn't one, then it must return −1.\nOn setting, the selectedIndex attribute must set\n the selectedness of all the option\n elements in the list of options to false, and\n then the option element in the list of\n options whose index is the given new value, if\n any, must have its selectedness set to true and\n its dirtiness set to true.\nThe value\n IDL attribute, on getting, must return the value of the\n first option element in the list of\n options in tree order that has its selectedness set to true, if any. If there isn't one,\n then it must return the empty string.\nOn setting, the value attribute must set the selectedness of all the option elements\n in the list of options to false, and then the\n first option element in the list of\n options, in tree order, whose value\n is equal to the given new value, if any, must have its selectedness set to true and its dirtiness set to true.\nThe multiple, required, and size IDL attributes must\n reflect the respective content attributes of the same name. The size IDL attribute has a default value of zero.\nThe willValidate, validity, and validationMessage IDL attributes, and the checkValidity(), reportValidity(), and setCustomValidity() methods, are part of the\n constraint validation API. The labels IDL\n attribute provides a list of the element's labels. The disabled, form, and\n name IDL attributes are part of the element's forms API.","num":"4.10.7","tag":"select"},{"description":"The datalist element represents a set of option elements that\n represent predefined options for other controls. In the rendering, the datalist\n element represents nothing and it, along with its children, should\n be hidden.\nThe datalist element can be used in two ways. In the simplest case, the\n datalist element has just option element children.\nIn the more elaborate case, the datalist element can be given contents that are to\n be displayed for down-level clients that don't support datalist. In this case, the\n option elements are provided inside a select element inside the\n datalist element.\nThe datalist element is hooked up to an input element using the list attribute on the input element.\nEach option element that is a descendant of the datalist element,\n that is not disabled, and whose value is a string that isn't the empty string, represents a\n suggestion. Each suggestion has a value and a label.\n \n \nThe options IDL attribute must return an\n HTMLCollection rooted at the datalist node, whose filter matches\n option elements.\nConstraint validation: If an element has a datalist element\n ancestor, it is barred from constraint validation.","num":"4.10.8","tag":"datalist"},{"description":"The optgroup element represents a group of option\n elements with a common label.\nThe element's group of option elements consists of the option\n elements that are children of the optgroup element.\nWhen showing option elements in select elements, user agents should\n show the option elements of such groups as being related to each other and separate\n from other option elements.\nThe disabled attribute is a boolean\n attribute and can be used to disable a group\n of option elements together.\nThe label\n attribute must be specified. Its value gives the name of the group, for the purposes of the user\n interface. User agents should use this attribute's value when labeling the group of\n option elements in a select element.\nThe disabled and label attributes must\n reflect the respective content attributes of the same name.","num":"4.10.9","tag":"optgroup"},{"description":"The option element represents an option in a select\n element or as part of a list of suggestions in a datalist element.\nIn certain circumstances described in the definition of the select element, an\n option element can be a select element's placeholder label\n option. A placeholder label option does not represent an actual option, but\n instead represents a label for the select control.\nThe disabled\n attribute is a boolean attribute. An option element is disabled if its disabled attribute is present or if it is a child of an\n optgroup element whose disabled\n attribute is present.\nAn option element that is disabled must\n prevent any click events that are queued on the user interaction task source from being dispatched on the\n element.\nThe label\n attribute provides a label for element. The label of an\n option element is the value of the label\n content attribute, if there is one and its value is not the empty string, or, otherwise, the value\n of the element's text IDL attribute.\nThe label content attribute, if specified, must not be\n empty.\nThe value\n attribute provides a value for element. The value of an\n option element is the value of the value\n content attribute, if there is one, or, if there is not, the value of the element's text IDL attribute.\nThe selected\n attribute is a boolean attribute. It represents the default selectedness of the element.\nThe dirtiness of an option element is\n a boolean state, initially false. It controls whether adding or removing the selected content attribute has any effect.\nThe selectedness of an option\n element is a boolean state, initially false. Except where otherwise specified, when the element is\n created, its selectedness must be set to true if\n the element has a selected attribute. Whenever an\n option element's selected attribute is\n added, if its dirtiness is false, its selectedness must be set to true. Whenever an\n option element's selected attribute is\n removed, if its dirtiness is false, its\n selectedness must be set to false.\nA select element whose multiple\n attribute is not specified must not have more than one descendant option element with\n its selected attribute set.\nAn option element's index is the number of\n option elements that are in the same list of\n options but that come before it in tree order. If the option\n element is not in a list of options, then the\n option element's index is zero.\nThe disabled IDL attribute must reflect the\n content attribute of the same name. The defaultSelected IDL attribute must\n reflect the selected content\n attribute.\nThe label\n IDL attribute, on getting, if there is a label content\n attribute, must return that attribute's value; otherwise, it must return the element's label. On setting, the element's label content attribute must be set to the new value.\nThe value\n IDL attribute, on getting, must return the element's value. On setting, the element's value content attribute must be set to the new value.\nThe selected IDL attribute, on getting, must return true if\n the element's selectedness is true, and false\n otherwise. On setting, it must set the element's selectedness to the new value, set its dirtiness to true, and then cause the element to\n ask for a reset.\nThe index\n IDL attribute must return the element's index.\nThe text IDL\n attribute, on getting, must return the result of stripping and collapsing ASCII whitespace from the concatenation of data of all the Text node descendants of the\n option element, in tree order, excluding any that are descendants of\n descendants of the option element that are themselves script or\n SVG script elements.\nThe text attribute's setter must string replace\n all with the given value within this element.\nThe form IDL\n attribute's behavior depends on whether the option element is in a\n select element or not. If the option has a select element\n as its parent, or has an optgroup element as its parent and that\n optgroup element has a select element as its parent, then the form IDL attribute must return the same value as the form IDL attribute on that select element. Otherwise, it\n must return null.\nA legacy factory function is provided for creating HTMLOptionElement objects (in\n addition to the factory methods from DOM such as createElement()): Option(text, value,\n defaultSelected, selected). When invoked, the legacy factory\n function must perform the following steps:\nLet document be the current global object's associated Document.Let option be the result of creating an\n element given document, option, and the HTML\n namespace.If text is not the empty string, then append to option a new\n Text node whose data is text.If value is given, then set\n an attribute value for option using \"value\" and value.If defaultSelected is true, then set an attribute value for option\n using \"selected\" and the empty string.If selected is true, then set option's selectedness to true; otherwise set its selectedness to false (even if\n defaultSelected is true).Return option.","num":"4.10.10","tag":"option"},{"description":"The textarea element represents a multiline plain text edit\n control for the element's raw\n value. The contents of the control represent the control's default value.\nThe raw value of a textarea\n control must be initially the empty string.\nThe readonly attribute is a boolean\n attribute used to control whether the text can be edited by the user or not.\nConstraint validation: If the readonly attribute is specified on a textarea\n element, the element is barred from constraint validation.\nA textarea element is mutable if it is\n neither disabled nor has a readonly attribute specified.\nWhen a textarea is mutable, its raw value should be editable by the user: the user\n agent should allow the user to edit, insert, and remove text, and to insert and remove line breaks\n in the form of U+000A LINE FEED (LF) characters. Any time the user causes the element's raw value to change, the user agent must queue an\n element task on the user interaction task source given the\n textarea element to fire an event named\n input at the textarea element, with the bubbles and composed\n attributes initialized to true. User agents may wait for a suitable break in the user's\n interaction before queuing the task; for example, a user agent could wait for the user to have not\n hit a key for 100ms, so as to only fire the event when the user pauses, instead of continuously\n for each keystroke.\nA textarea element's dirty value flag must\n be set to true whenever the user interacts with the control in a way that changes the raw value.\nThe cloning steps for textarea\n elements must propagate the raw value and dirty value flag from the node being cloned to the copy.\nThe children changed steps for textarea elements must, if the\n element's dirty value flag is false, set the element's\n raw value to its child text\n content.\nThe reset algorithm for textarea\n elements is to set the dirty value flag back to false, and\n set the raw value of element to its child\n text content.\nWhen a textarea element is popped off the stack of open elements of\n an HTML parser or XML parser, then the user agent must invoke the\n element's reset algorithm.\nIf the element is mutable, the user agent should allow\n the user to change the writing direction of the element, setting it either to a left-to-right\n writing direction or a right-to-left writing direction. If the user does so, the user agent must\n then run the following steps:\nSet the element's dir attribute to \"ltr\" if the user selected a left-to-right writing direction, and\n \"rtl\" if the user selected a right-to-left writing\n direction.Queue an element task on the user interaction task source given\n the textarea element to fire an event named\n input at the textarea element, with the bubbles and composed\n attributes initialized to true.\nThe cols\n attribute specifies the expected maximum number of characters per line. If the cols attribute is specified, its value must be a valid\n non-negative integer greater than zero. If applying the rules for\n parsing non-negative integers to the attribute's value results in a number greater than\n zero, then the element's character width is that\n value; otherwise, it is 20.\nThe user agent may use the textarea element's character width as a hint to the user as to how many\n characters the server prefers per line (e.g. for visual user agents by making the width of the\n control be that many characters). In visual renderings, the user agent should wrap the user's\n input in the rendering so that each line is no wider than this number of characters.\nThe rows\n attribute specifies the number of lines to show. If the rows attribute is specified, its value must be a valid\n non-negative integer greater than zero. If applying the rules for\n parsing non-negative integers to the attribute's value results in a number greater than\n zero, then the element's character height is that\n value; otherwise, it is 2.\nVisual user agents should set the height of the control to the number of lines given by character height.\nThe wrap\n attribute is an enumerated attribute with two keywords and states: the soft keyword\n which maps to the Soft state, and the hard keyword\n which maps to the Hard state. The missing value default and invalid value default are the Soft state.\nThe Soft state indicates that the text in the\n textarea is not to be wrapped when it is submitted (though it can still be wrapped in\n the rendering).\nThe Hard state indicates that the text in the\n textarea is to have newlines added by the user agent so that the text is wrapped when\n it is submitted.\nIf the element's wrap attribute is in the Hard state, the cols attribute must be specified.\nFor historical reasons, the element's value is normalized in three different ways for three\n different purposes. The raw value is the value as\n it was originally set. It is not normalized. The API\n value is the value used in the value IDL\n attribute, textLength IDL attribute, and by the\n maxlength and minlength content attributes. It is normalized so that line\n breaks use U+000A LINE FEED (LF) characters. Finally, there is the value, as used in form submission and other processing models in\n this specification. It is normalized as for the API\n value, and in addition, if necessary given the element's wrap attribute, additional line breaks are inserted to wrap the\n text at the given width.\nThe algorithm for obtaining\n the element's API value is to return the element's\n raw value, with newlines normalized.\nThe element's value is defined to be the element's API value with the textarea wrapping\n transformation applied. The textarea wrapping transformation is the following\n algorithm, as applied to a string:\nIf the element's wrap attribute is in the Hard state, insert U+000A LINE FEED (LF) characters\n into the string using an implementation-defined algorithm so that each line has no\n more than character width characters. For the\n purposes of this requirement, lines are delimited by the start of the string, the end of the\n string, and U+000A LINE FEED (LF) characters.\nThe maxlength attribute is a form control maxlength attribute.\nIf the textarea element has a maximum allowed value length, then the\n element's children must be such that the length of the value of the element's\n descendant text content with newlines\n normalized is equal to or less than the element's maximum allowed value\n length.\nThe minlength attribute is a form control minlength attribute.\nThe required attribute is a boolean\n attribute. When specified, the user will be required to enter a value before submitting the\n form.\nConstraint validation: If the element has its required attribute specified, and the element is mutable, and the element's value is the empty string, then the element is suffering\n from being missing.\nThe placeholder attribute represents a short\n hint (a word or short phrase) intended to aid the user with data entry when the control has no\n value. A hint could be a sample value or a brief description of the expected format.\nThe placeholder attribute should not be used as\n an alternative to a label. For a longer hint or other advisory text, the title attribute is more appropriate.\nUser agents should present this hint to the user when the element's value is the empty string and the control is not\n focused (e.g. by displaying it inside a blank unfocused control). All U+000D CARRIAGE\n RETURN U+000A LINE FEED character pairs (CRLF) in the hint, as well as all other U+000D CARRIAGE\n RETURN (CR) and U+000A LINE FEED (LF) characters in the hint, must be treated as line breaks when\n rendering the hint.\nIf a user agent normally doesn't show this hint to the user when the control is\n focused, then the user agent should nonetheless show the hint for the control if it\n was focused as a result of the autofocus attribute, since\n in that case the user will not have had an opportunity to examine the control before focusing\n it.\n\n The name attribute represents the element's name.\n The dirname attribute controls how the element's directionality is submitted.\n The disabled attribute is used to make the control\n non-interactive and to prevent its value from being submitted.\n The form attribute is used to explicitly associate the\n textarea element with its form owner.\n The autocomplete attribute controls how the user agent\n provides autofill behavior.\n \nThe cols, placeholder, required, rows, and wrap IDL\n attributes must reflect the respective content attributes of the same name. The cols and rows attributes\n are limited to only non-negative numbers greater than zero with fallback. The cols IDL attribute's default value is 20. The rows IDL attribute's default value is 2. The dirName IDL attribute\n must reflect the dirname content attribute. The\n maxLength IDL attribute must reflect the\n maxlength content attribute, limited to only\n non-negative numbers. The minLength IDL attribute must reflect the\n minlength content attribute, limited to only\n non-negative numbers. The readOnly IDL attribute must reflect the\n readonly content attribute.\nThe type\n IDL attribute must return the value \"textarea\".\nThe defaultValue attribute's getter must return the\n element's child text content.\n \n \nThe defaultValue attribute's setter must\n string replace all with the given value within this element.\nThe value IDL attribute must, on getting, return the\n element's API value. On setting, it must perform the\n following steps:\nLet oldAPIValue be this element's API value.Set this element's raw value to the new\n value.Set this element's dirty value flag to\n true.If the new API value is different from\n oldAPIValue, then move the text entry\n cursor position to the end of the text control, unselecting any selected text and resetting the selection direction to \"none\".\nThe textLength IDL attribute must return the\n length of the element's API value.\nThe willValidate, validity, and validationMessage IDL attributes, and the checkValidity(), reportValidity(), and setCustomValidity() methods, are part of the\n constraint validation API. The labels IDL\n attribute provides a list of the element's labels. The select(), selectionStart, selectionEnd, selectionDirection, setRangeText(), and setSelectionRange() methods and IDL attributes\n expose the element's text selection. The disabled,\n form, and name IDL attributes\n are part of the element's forms API.","num":"4.10.11","tag":"textarea"},{"description":"The output element represents the result of a calculation performed\n by the application, or the result of a user action.\nThe for content\n attribute allows an explicit relationship to be made between the result of a calculation and the\n elements that represent the values that went into the calculation or that otherwise influenced the\n calculation. The for attribute, if specified, must contain a\n string consisting of an unordered set of unique space-separated tokens, none of which\n are identical to another token and each of which must have the value of an ID of an element in the same tree.\nThe form attribute is used to explicitly associate the\n output element with its form owner. The name attribute represents the element's name. The output\n element is associated with a form so that it can be easily referenced from the event\n handlers of form controls; the element's value itself is not submitted when the form is\n submitted.\nThe element has a default value\n override (null or a string). Initially it must be null.\nThe element's default value is determined by\n the following steps:\nIf this element's default value\n override is non-null, then return it.Return this element's descendant text content.\nThe reset algorithm for output\n elements is to run these steps:\n \n \nString replace all with this element's default value within this element.Set this element's default value\n override to null.\nThe value\n getter steps are to return this's descendant text content.\nThe value setter steps are:\nSet this's default value\n override to its default value.String replace all with the given value within this.\nThe defaultValue getter steps are to return the result\n of running this's default\n value.\nThe defaultValue setter steps are:\nIf this's default value\n override is null, then string replace all with the given value within\n this and return.Set this's default value\n override to the given value.\nThe type\n getter steps are to return \"output\".\nThe htmlFor IDL attribute must reflect the for content attribute.\nThe willValidate, validity, and validationMessage IDL attributes, and the checkValidity(), reportValidity(), and setCustomValidity() methods, are part of the\n constraint validation API. The labels IDL\n attribute provides a list of the element's labels. The form and name IDL attributes are\n part of the element's forms API.","num":"4.10.12","tag":"output"},{"description":"The progress element represents the completion progress of a task.\n The progress is either indeterminate, indicating that progress is being made but that it is not\n clear how much more work remains to be done before the task is complete (e.g. because the task is\n waiting for a remote host to respond), or the progress is a number in the range zero to a maximum,\n giving the fraction of work that has so far been completed.\nThere are two attributes that determine the current task completion represented by the element.\n The value\n attribute specifies how much of the task has been completed, and the max attribute specifies how much work\n the task requires in total. The units are arbitrary and not specified.\nAuthors are encouraged to also include the current value and the maximum value inline as text\n inside the element, so that the progress is made available to users of legacy user agents.\nThe value and max attributes, when present, must have values that are valid floating-point numbers. The value attribute, if present, must have a value equal to or\n greater than zero, and less than or equal to the value of the max attribute, if present, or 1.0, otherwise. The max attribute, if present, must have a value greater than\n zero.\nUser agent requirements: If the value\n attribute is omitted, then the progress bar is an indeterminate progress bar. Otherwise, it is a\n determinate progress bar.\nIf the progress bar is a determinate progress bar and the element has a max attribute, the user agent must parse the max attribute's value according to the rules for parsing\n floating-point number values. If this does not result in an error, and if the parsed value\n is greater than zero, then the maximum value of the\n progress bar is that value. Otherwise, if the element has no max attribute, or if it has one but parsing it resulted in an\n error, or if the parsed value was less than or equal to zero, then the maximum value of the progress bar is 1.0.\nIf the progress bar is a determinate progress bar, user agents must parse the value attribute's value according to the rules for\n parsing floating-point number values. If this does not result in an error and the parsed\n value is greater than zero, then the value of the\n progress bar is that parsed value. Otherwise, if parsing the value attribute's value resulted in an error or a number less\n than or equal to zero, then the value of the progress\n bar is zero.\nIf the progress bar is a determinate progress bar, then the current value is the maximum value, if value is greater than the maximum value, and value otherwise.\nUA requirements for showing the progress bar: When representing a\n progress element to the user, the UA should indicate whether it is a determinate or\n indeterminate progress bar, and in the former case, should indicate the relative position of the\n current value relative to the maximum value.\nIf the progress bar is an indeterminate progress bar, then the position IDL attribute\n must return −1. Otherwise, it must return the result of dividing the current value by the maximum value.\nIf the progress bar is an indeterminate progress bar, then the value IDL attribute, on\n getting, must return 0. Otherwise, it must return the current value. On setting, the given value must be\n converted to the best representation of the number as a floating-point number and\n then the value content attribute must be set to that\n string.\nThe max\n IDL attribute must reflect the content attribute of the same name, limited to\n numbers greater than zero. The default value for max\n is 1.0.\nThe labels IDL attribute provides a list of the element's\n labels.","num":"4.10.13","tag":"progress"},{"description":"The meter element represents a scalar measurement within a known\n range, or a fractional value; for example disk usage, the relevance of a query result, or the\n fraction of a voting population to have selected a particular candidate.\nThis is also known as a gauge.\nThe meter element should not be used to indicate progress (as in a progress bar).\n For that role, HTML provides a separate progress element.\nThere are six attributes that determine the semantics of the gauge represented by the\n element.\nThe min attribute\n specifies the lower bound of the range, and the max attribute specifies the upper bound. The value attribute specifies\n the value to have the gauge indicate as the \"measured\" value.\nThe other three attributes can be used to segment the gauge's range into \"low\", \"medium\", and\n \"high\" parts, and to indicate which part of the gauge is the \"optimum\" part. The low attribute specifies the range that is\n considered to be the \"low\" part, and the high attribute specifies the range that is considered to be\n the \"high\" part. The optimum attribute gives the position that is \"optimum\";\n if that is higher than the \"high\" value then this indicates that the higher the value, the better;\n if it's lower than the \"low\" mark then it indicates that lower values are better, and naturally if\n it is in between then it indicates that neither high nor low values are good.\nAuthoring requirements: The value attribute must be specified. The value, min, low, high, max, and optimum attributes,\n when present, must have values that are valid\n floating-point numbers.\nIn addition, the attributes' values are further constrained:\nLet value be the value attribute's\n number.\nIf the min attribute is specified, then let minimum be that attribute's value; otherwise, let it be zero.\nIf the max attribute is specified, then let maximum be that attribute's value; otherwise, let it be 1.0.\nThe following inequalities must hold, as applicable:\nminimum ≤ value ≤ maximumminimum ≤ low ≤ maximum (if low is specified)minimum ≤ high ≤ maximum (if high is specified)minimum ≤ optimum ≤ maximum (if optimum is specified)low ≤ high (if\n both low and high are\n specified)\nAuthors are encouraged to include a textual representation of the gauge's state in the\n element's contents, for users of user agents that do not support the meter\n element.\nWhen used with microdata, the meter element's value attribute provides the element's machine-readable value.\nThere is no explicit way to specify units in the meter element, but the units may\n be specified in the title attribute in free-form text.\nUser agent requirements: User agents must parse the min, max, value, low, high, and optimum\n attributes using the rules for parsing floating-point number values.\nUser agents must then use all these numbers to obtain values for six points on the gauge, as\n follows. (The order in which these are evaluated is important, as some of the values refer to\n earlier ones.)\nThe minimum value\n If the min attribute is specified and a value could be\n parsed out of it, then the minimum value is that value. Otherwise, the minimum value is\n zero.\n The maximum value\n If the max attribute is specified and a value could be\n parsed out of it, then the candidate maximum value is that value. Otherwise, the candidate\n maximum value is 1.0.\n \n If the candidate maximum value is greater than or equal to the minimum value, then the\n maximum value is the candidate maximum value. Otherwise, the maximum value is the same as the\n minimum value.\n The actual value\n If the value attribute is specified and a value could\n be parsed out of it, then that value is the candidate actual value. Otherwise, the candidate\n actual value is zero.\n \n If the candidate actual value is less than the minimum value, then the actual value is the\n minimum value.\n \n Otherwise, if the candidate actual value is greater than the maximum value, then the actual\n value is the maximum value.\n \n Otherwise, the actual value is the candidate actual value.\n The low boundary\n If the low attribute is specified and a value could be\n parsed out of it, then the candidate low boundary is that value. Otherwise, the candidate low\n boundary is the same as the minimum value.\n \n If the candidate low boundary is less than the minimum value, then the low boundary is the\n minimum value.\n \n Otherwise, if the candidate low boundary is greater than the maximum value, then the low\n boundary is the maximum value.\n \n Otherwise, the low boundary is the candidate low boundary.\n The high boundary\n If the high attribute is specified and a value could be\n parsed out of it, then the candidate high boundary is that value. Otherwise, the candidate high\n boundary is the same as the maximum value.\n \n If the candidate high boundary is less than the low boundary, then the high boundary is the\n low boundary.\n \n Otherwise, if the candidate high boundary is greater than the maximum value, then the high\n boundary is the maximum value.\n \n Otherwise, the high boundary is the candidate high boundary.\n The optimum point\n If the optimum attribute is specified and a value\n could be parsed out of it, then the candidate optimum point is that value. Otherwise, the\n candidate optimum point is the midpoint between the minimum value and the maximum value.\n \n If the candidate optimum point is less than the minimum value, then the optimum point is the\n minimum value.\n \n Otherwise, if the candidate optimum point is greater than the maximum value, then the optimum\n point is the maximum value.\n \n Otherwise, the optimum point is the candidate optimum point.\n \nAll of which will result in the following inequalities all being true:\nminimum value ≤ actual value ≤ maximum valueminimum value ≤ low boundary ≤ high boundary ≤ maximum valueminimum value ≤ optimum point ≤ maximum value\nUA requirements for regions of the gauge: If the optimum point is equal to the\n low boundary or the high boundary, or anywhere in between them, then the region between the low\n and high boundaries of the gauge must be treated as the optimum region, and the low and high\n parts, if any, must be treated as suboptimal. Otherwise, if the optimum point is less than the low\n boundary, then the region between the minimum value and the low boundary must be treated as the\n optimum region, the region from the low boundary up to the high boundary must be treated as a\n suboptimal region, and the remaining region must be treated as an even less good region. Finally,\n if the optimum point is higher than the high boundary, then the situation is reversed; the region\n between the high boundary and the maximum value must be treated as the optimum region, the region\n from the high boundary down to the low boundary must be treated as a suboptimal region, and the\n remaining region must be treated as an even less good region.\nUA requirements for showing the gauge: When representing a meter\n element to the user, the UA should indicate the relative position of the actual value to the\n minimum and maximum values, and the relationship between the actual value and the three regions of\n the gauge.\nUser agents may combine the value of the title attribute and the other attributes to provide context-sensitive\n help or inline text detailing the actual values.\nThe value IDL\n attribute, on getting, must return the actual value. On\n setting, the given value must be converted to the best representation of the number as a\n floating-point number and then the value content\n attribute must be set to that string.\nThe min IDL\n attribute, on getting, must return the minimum value.\n On setting, the given value must be converted to the best representation of the number as a\n floating-point number and then the min content\n attribute must be set to that string.\nThe max IDL\n attribute, on getting, must return the maximum value.\n On setting, the given value must be converted to the best representation of the number as a\n floating-point number and then the max content\n attribute must be set to that string.\nThe low IDL\n attribute, on getting, must return the low boundary. On\n setting, the given value must be converted to the best representation of the number as a\n floating-point number and then the low content\n attribute must be set to that string.\nThe high IDL\n attribute, on getting, must return the high boundary. On\n setting, the given value must be converted to the best representation of the number as a\n floating-point number and then the high content\n attribute must be set to that string.\nThe optimum\n IDL attribute, on getting, must return the optimum\n value. On setting, the given value must be converted to the best representation of\n the number as a floating-point number and then the optimum content attribute must be set to that string.\nThe labels IDL attribute provides a list of the element's\n labels.","num":"4.10.14","tag":"meter"},{"description":"The fieldset element represents a set of form controls (or other\n content) grouped together, optionally with a caption. The caption is given by the first\n legend element that is a child of the fieldset element, if any. The\n remainder of the descendants form the group.\nThe disabled attribute, when specified, causes all the\n form control descendants of the fieldset element, excluding those that are\n descendants of the fieldset element's first legend element child, if\n any, to be disabled.\nA fieldset element is a disabled\n fieldset if it matches any of the following conditions:\nIts disabled attribute is specified\n \n It is a descendant of another fieldset element whose disabled attribute is specified, and is not a\n descendant of that fieldset element's first legend element child, if\n any.\nThe form attribute is used to explicitly associate the\n fieldset element with its form owner. The name attribute represents the element's name.\nThe disabled IDL attribute must reflect the\n content attribute of the same name.\nThe type\n IDL attribute must return the string \"fieldset\".\nThe elements IDL attribute must return an\n HTMLCollection rooted at the fieldset element, whose filter matches\n listed elements.\nThe willValidate, validity, and validationMessage attributes, and the checkValidity(), reportValidity(), and setCustomValidity() methods, are part of the\n constraint validation API. The form and name IDL attributes are part of the element's forms API.","num":"4.10.15","tag":"fieldset"},{"description":"The legend element represents a caption for the rest of the contents\n of the legend element's parent fieldset element, if\n any.\nThe form IDL\n attribute's behavior depends on whether the legend element is in a\n fieldset element or not. If the legend has a fieldset\n element as its parent, then the form IDL attribute must\n return the same value as the form IDL attribute on that\n fieldset element. Otherwise, it must return null.","num":"4.10.16","tag":"legend"},{"description":"The details element represents a disclosure widget from which the\n user can obtain additional information or controls.\nThe first summary element child of the element, if any,\n represents the summary or legend of the details. If there is no\n child summary element, the user agent should provide its own legend (e.g.\n \"Details\").\nThe rest of the element's contents represents the additional information or\n controls.\nThe open content\n attribute is a boolean attribute. If present, it indicates that both the summary and\n the additional information is to be shown to the user. If the attribute is absent, only the\n summary is to be shown.\nWhen the element is created, if the attribute is absent, the additional information should be\n hidden; if the attribute is present, that information should be shown. Subsequently, if the\n attribute is removed, then the information should be hidden; if the attribute is added, the\n information should be shown.\nThe user agent should allow the user to request that the additional information be shown or\n hidden. To honor a request for the details to be shown, the user agent must set the open attribute on the element to the empty string. To honor a\n request for the information to be hidden, the user agent must remove the open attribute from the element.\nWhenever the open attribute is added to or removed from\n a details element, the user agent must queue an element task on the\n DOM manipulation task source given then details element that runs the\n following steps, which are known as the details notification task steps, for this\n details element:\n\n If another task has been queued to run the details notification task steps for this\n details element, then return.\n \n \n Fire an event named toggle at the details element.\nThe open\n IDL attribute must reflect the open content\n attribute.\nThe ancestor details revealing algorithm is to run the following steps on\n currentNode:\n\n While currentNode has a parent node within the flat tree:\n \n \n If currentNode is slotted into the second slot of a details\n element:\n \n Set currentNode to the details element which\n currentNode is slotted into.If the open attribute is not set on\n currentNode, then set\n the open attribute on currentNode to the\n empty string.\n Otherwise, set currentNode to the parent node of\n currentNode within the flat tree.\n ","num":"4.11.1","tag":"details"},{"description":"The summary element represents a summary, caption, or legend for the\n rest of the contents of the summary element's parent details\n element, if any.\nA summary element is a summary for its parent details if the following\n algorithm returns true:\nIf this summary element has no parent, then return false.Let parent be this summary element's parent.If parent is not a details element, then return false.If parent's first summary element child is not this\n summary element, then return false.Return true.\nThe activation behavior of summary elements is to run the following\n steps:\nIf this summary element is not the summary for its parent\n details, then return.Let parent be this summary element's parent.\n If the open attribute is present on\n parent, then remove it.\n Otherwise, set parent's\n open attribute to the empty string.\n \n \n ","num":"4.11.2","tag":"summary"},{"description":"The dialog element represents a part of an application that a user interacts with\n to perform a task, for example a dialog box, inspector, or window.\nThe open attribute\n is a boolean attribute. When specified, it indicates that the dialog\n element is active and that the user can interact with it.\nA dialog element without an open attribute\n specified should not be shown to the user. This requirement may be implemented indirectly through\n the style layer. For example, user agents that support the suggested\n default rendering implement this requirement using the CSS rules described in the Rendering section.\n\n Removing the open attribute will usually hide the\n dialog. However, doing so has a number of strange additional consequences:\n \n The close event will not be fired.The close() method, and any user-agent provided cancelation interface, will no longer be able\n to close the dialog.If the dialog was shown using its showModal()\n method, the Document will still be blocked.\n \n For these reasons, it is generally better to never remove the open attribute manually. Instead, use the close() method to close the dialog, or the hidden attribute to hide it.\n \nThe tabindex attribute must not be specified on\n dialog elements.\nWhen the show()\n method is invoked, the user agent must run the following steps:\nIf the element already has an open attribute, then\n return.Add an open attribute to the dialog\n element, whose value is the empty string.Set the dialog element's previously focused element to the\n focused element.Run the dialog focusing steps for the dialog element.\nWhen the showModal() method is invoked, the user agent must run\n the following steps:\nLet subject be the dialog element on which the method was\n invoked.If subject already has an open\n attribute, then throw an \"InvalidStateError\" DOMException.If subject is not connected, then throw an\n \"InvalidStateError\" DOMException.Add an open attribute to subject, whose\n value is the empty string.Set the is modal flag of subject to true.\n Let subject's node document be blocked by the modal dialog subject.\n \n \n If subject's node document's top layer does not\n already contain subject, then add subject to subject's node\n document's top layer.Set the subject's previously focused element to the\n focused element.Run the dialog focusing steps for subject.\nThe dialog focusing steps for a dialog element subject are as follows:\nLet control be the focus delegate of subject.If control is null, then set control to subject.\n Run the focusing steps for control.\n \n \n Let topDocument be the active document of control's\n node document's browsing context's\n top-level browsing context.If control's node document's origin is not the same\n as the origin of topDocument, then\n return.Empty topDocument's\n autofocus candidates.Set topDocument's autofocus processed flag to true.\nIf at any time a dialog element is removed from a Document, then if that dialog is in that\n Document's top layer, it must be removed from it. Also, set the dialog element's\n is modal flag to false.\n \n \nWhen the close(returnValue) method is invoked, the user\n agent must close the dialog that the method was invoked on. If returnValue\n was given, it must be used as the return value; otherwise, there is no return value.\nWhen a dialog element subject is to be closed, optionally with a return value result, the user agent\n must run the following steps:\nIf subject does not have an open\n attribute, then return.Remove subject's open\n attribute.Set the is modal flag of subject to false.If the argument result was provided, then set the returnValue attribute to the value of result.If subject is in its Document's top layer, then remove it.\n If subject's previously focused element is not null, then:\n \n Let element be subject's previously focused\n element.Set subject's previously focused element to null.Run the focusing steps for element; the viewport should not be\n scrolled by doing this step.\n Queue an element task on the user interaction task source given the\n subject element to fire an event named\n close at subject.\nThe returnValue IDL attribute, on getting, must return\n the last value to which it was set. On setting, it must be set to the new value. When the element\n is created, it must be set to the empty string.\n\n We use show/close as the verbs for dialog elements, as opposed to verb pairs that\n are more commonly thought of as antonyms such as show/hide or open/close, due to the following\n constraints:\n \n Hiding a dialog is different from closing one. Closing a dialog gives it a return value,\n fires an event, unblocks the page for other dialogs, and so on. Whereas hiding a dialog is a\n purely visual property, and is something you can already do with the hidden attribute or by removing the open attribute. (See also the note above about removing the open attribute, and how hiding the dialog in that way is\n generally not desired.)Showing a dialog is different from opening one. Opening a dialog consists of creating\n and showing that dialog (similar to how window.open() both\n creates and shows a new window). Whereas showing the dialog is the process of taking a\n dialog element that is already in the DOM, and making it interactive and visible\n to the user.If we were to have a dialog.open() method despite the above, it\n would conflict with the dialog.open property.\n \n Furthermore, a survey\n of many other UI frameworks contemporary to the original design of the dialog\n element made it clear that the show/close verb pair was reasonably common.\n \n In summary, it turns out that the implications of certain verbs, and how they are used in\n technology contexts, mean that paired actions such as showing and closing a dialog are not\n always expressible as antonyms.\n \nCanceling dialogs: When Document is\n blocked by a modal dialog dialog, user agents may provide a user interface\n that, upon activation, queues an element task on the\n user interaction task source given the dialog element to run these steps:\n \n \nLet close be the result of firing an\n event named cancel at dialog, with the cancelable attribute initialized to true.If close is true and dialog has an open attribute, then close the dialog with no\n return value.\nEach dialog element has an is modal flag. When a dialog\n element is created, this flag must be set to false.\nEach dialog element has a previously focused element which is null or\n an element, and it is initially null. When showModal()\n and show() are called, this element is set to the currently\n focused element before running the dialog focusing steps.\nThe open IDL\n attribute must reflect the open content\n attribute.","num":"4.11.4","tag":"dialog"},{"description":"The script element allows authors to include dynamic script and data blocks in\n their documents. The element does not represent content for the\n user.\nThe type attribute\n allows customization of the type of script represented:\nOmitting the attribute, setting it to the empty string, or setting it to a\n JavaScript MIME type essence match, means that the script is a classic\n script, to be interpreted according to the JavaScript Script top-level production. Classic scripts are affected by the\n async and defer\n attributes, but only when the src attribute is set.\n Authors should omit the type attribute instead of\n redundantly setting it.Setting the attribute to an ASCII case-insensitive match for the string\n \"module\" means that the script is a JavaScript module\n script, to be interpreted according to the JavaScript Module top-level production. Module scripts are not affected by the\n defer attribute, but are affected by the async attribute (regardless of the state of the src attribute).Setting the attribute to any other value means that the script is a data\n block, which is not processed. None of the script attributes (except type itself) have any effect on data blocks. Authors must use\n a valid MIME type string that is not a JavaScript MIME type essence\n match to denote data blocks.\nClassic scripts and JavaScript module scripts can be embedded inline, or be\n imported from an external file using the src attribute, which if specified gives the URL\n of the external script resource to use. If src is specified,\n it must be a valid non-empty URL potentially surrounded by spaces.\nThe contents of inline script elements, or the external script resource, must\n conform with the requirements of the JavaScript specification's Script or Module productions, for classic scripts and JavaScript module scripts respectively. [JAVASCRIPT]\nThe contents of the external script resource for CSS module\n scripts must conform to the requirements of the CSS specification. [CSS]\nThe contents of the external script resource for JSON module\n scripts must conform to the requirements of the JSON specification [JSON].\nWhen used to include data blocks, the data must be embedded\n inline, the format of the data must be given using the type\n attribute, and the contents of the script element must conform to the requirements\n defined for the format used. The src, async, nomodule,\n defer, crossorigin, integrity, and referrerpolicy attributes must not be specified.\nThe nomodule\n attribute is a boolean attribute that prevents a script from being executed in user\n agents that support module scripts. This allows selective\n execution of module scripts in modern user agents and classic scripts in older user agents, as shown below. The nomodule attribute must not be specified on module scripts (and will be ignored if it is).\nThe async and\n defer attributes are\n boolean attributes that indicate how the script should be\n evaluated. Classic scripts may specify defer or async, but must\n not specify either unless the src attribute is present.\n Module scripts may specify the async attribute, but must not specify the defer attribute.\nThere are several possible modes that can be selected using these attributes, and depending on\n the script's type.\nFor classic scripts, if the async attribute is present, then the classic script will be\n fetched in parallel to parsing and evaluated as soon as it is available (potentially\n before parsing completes). If the async attribute is not\n present but the defer attribute is present, then the\n classic script will be fetched in parallel and evaluated when the page has finished\n parsing. If neither attribute is present, then the script is fetched and evaluated immediately,\n blocking parsing until these are both complete.\nFor module scripts, if the async attribute is present, then the module script and all its\n dependencies will be fetched in parallel to parsing, and the module script will\n be evaluated as soon as it is available (potentially before parsing completes). Otherwise, the\n module script and its dependencies will be fetched in parallel to parsing and\n evaluated when the page has finished parsing. (The defer\n attribute has no effect on module scripts.)\nThis is all summarized in the following schematic diagram:\n\nThe defer attribute may be specified even if the async attribute is specified, to cause legacy web browsers that\n only support defer (and not async) to fall back to the defer behavior instead of the blocking behavior that\n is the default.\nThe crossorigin attribute is a CORS settings\n attribute. For classic scripts, it controls whether\n error information will be exposed, when the script is obtained from other origins. For module scripts, it\n controls the credentials mode used for\n cross-origin requests.\nThe integrity\n attribute represents the integrity\n metadata for requests which this element is responsible for. The value is text. The integrity attribute must not be specified when the src attribute is not specified. [SRI]\nThe referrerpolicy attribute is a referrer\n policy attribute. Its purpose is to set the referrer policy used when fetching the script, as well as any scripts imported from it. [REFERRERPOLICY]\nThe blocking\n attribute is a blocking attribute.\nChanging the src, type, nomodule, async, defer, crossorigin, integrity, and referrerpolicy attributes dynamically has no direct effect; these\n attributes are only used at specific times described below.\nThe IDL attributes src, type, defer, integrity, and blocking, must each\n reflect the respective content attributes of the same name.\nThe referrerPolicy IDL attribute must\n reflect the referrerpolicy content\n attribute, limited to only known values.\nThe crossOrigin IDL attribute must reflect\n the crossorigin content attribute, limited to\n only known values.\nThe noModule IDL attribute must reflect the\n nomodule content attribute.\nThe async\n getter steps are:\nIf this's force async is true, then\n return true.If this's async content attribute is\n present, then return true.Return false.\nThe async setter steps are:\nSet this's force async to\n false.If the given value is true, then set this's async content attribute to the empty string.Otherwise, remove this's async\n content attribute.\nThe text\n attribute's getter must return this script element's child text\n content.\nThe text attribute's setter must string replace\n all with the given value within this script element.\nThe supports(type) method steps are:\nIf type is \"classic\", then return\n true.If type is \"module\", then return\n true.Return false.","num":"4.12.1","tag":"script"},{"description":"The noscript element represents nothing if scripting is enabled, and represents its children if\n scripting is disabled. It is used to present different\n markup to user agents that support scripting and those that don't support scripting, by affecting\n how the document is parsed.\nWhen used in HTML documents, the allowed content model is as follows:\nIn a head element, if scripting is\n disabled for the noscript elementThe noscript element must contain only link, style,\n and meta elements.In a head element, if scripting is enabled\n for the noscript elementThe noscript element must contain only text, except that invoking the\n HTML fragment parsing algorithm with\n the noscript element as the context\n element and the text contents as the input must result in a list of nodes\n that consists only of link, style, and meta elements that\n would be conforming if they were children of the noscript element, and no parse errors.Outside of head elements, if scripting is\n disabled for the noscript elementThe noscript element's content model is transparent, with the\n additional restriction that a noscript element must not have a noscript\n element as an ancestor (that is, noscript can't be nested).Outside of head elements, if scripting is\n enabled for the noscript element\n The noscript element must contain only text, except that the text must be such\n that running the following algorithm results in a conforming document with no\n noscript elements and no script elements, and such that no step in the\n algorithm throws an exception or causes an HTML parser to flag a parse\n error:\n \n \n Remove every script element from the document.Make a list of every noscript element in the document. For every\n noscript element in that list, perform the following steps:\n \n Let s be the child text content of the noscript\n element.Set the outerHTML attribute of the\n noscript element to the value of s. (This, as a\n side-effect, causes the noscript element to be removed from the document.) [DOMPARSING]\n \n \nThe noscript element must not be used in XML documents.\nThe noscript element has no other requirements. In particular, children of the\n noscript element are not exempt from form submission, scripting, and so\n forth, even when scripting is enabled for the element.","num":"4.12.2","tag":"noscript"},{"description":"The template element is used to declare fragments of HTML that can be cloned and\n inserted in the document by script.\nIn a rendering, the template element represents nothing.\nThe template contents of a template element are not children of the element itself.\nEach template element has an associated DocumentFragment object that\n is its template contents. The template contents have no conformance requirements. When a template element\n is created, the user agent must run the following steps to establish the template\n contents:\nLet doc be the template element's node document's appropriate template contents owner\n document.Create a DocumentFragment object whose node document is\n doc and host is the\n template element.Set the template element's template contents to the newly\n created DocumentFragment object.\nA Document doc's appropriate template contents owner\n document is the Document returned by the following algorithm:\n\n If doc is not a Document created by this algorithm, then:\n \n \n If doc does not yet have an associated inert template document,\n then:\n \n Let new doc be a new Document (whose browsing context is null). This is \"a\n Document created by this algorithm\" for the purposes of the step above.If doc is an HTML document, mark\n new doc as an HTML document\n also.Let doc's associated inert template document be new doc.\n Set doc to doc's associated inert\n template document.\n \n \n Return doc.\nThe adopting steps\n (with node and oldDocument as parameters) for template elements\n are the following:\n\n Let doc be node's node document's\n appropriate template contents owner document.\n \n \n Adopt node's\n template contents (a DocumentFragment object) into doc.\nThe content IDL attribute must return the\n template element's template contents.\nThe cloning steps for a template\n element node being cloned to a copy copy must run the\n following steps:\nIf the clone children flag is not set in the calling clone algorithm, return.Let copied contents be the result of cloning all the children of node's\n template contents, with document set to copy's template contents's node\n document, and with the clone children\n flag set.Append copied contents to copy's template\n contents.","num":"4.12.3","tag":"template"},{"description":"The slot element defines a slot. It is\n typically used in a shadow tree. A slot element represents\n its assigned nodes, if any, and its contents otherwise.\nThe name content\n attribute may contain any string value. It represents a slot's\n name.\nThe name IDL\n attribute must reflect the content attribute of the same name.\nThe slot element has manually assigned\n nodes, which is an ordered set of slottables set by assign().\n This set is initially empty.\nThe assignedNodes(options) method steps\n are:\nIf options[\"flatten\"] is\n false, then return this's assigned nodes.Return the result of finding flattened slottables with\n this.\nThe assignedElements(options) method\n steps are:\nIf options[\"flatten\"] is\n false, then return this's assigned nodes, filtered to contain only\n Element nodes.Return the result of finding flattened slottables with this,\n filtered to contain only Element nodes.\nThe assign(...nodes) method steps are:\nFor each node of this's\n manually assigned nodes, set node's manual slot assignment\n to null.Let nodesSet be a new ordered set.\n For each node of nodes:\n \n If node's manual slot assignment refers to a slot,\n then remove node from that slot's\n manually assigned nodes.Set node's manual slot assignment to this.Append node to nodesSet.\n Set this's manually assigned nodes to\n nodesSet.Run assign slottables for a tree for this's\n root.","num":"4.12.4","tag":"slot"},{"description":"The canvas element provides scripts with a resolution-dependent bitmap canvas,\n which can be used for rendering graphs, game graphics, art, or other visual images on the fly.\nAuthors should not use the canvas element in a document when a more suitable\n element is available. For example, it is inappropriate to use a canvas element to\n render a page heading: if the desired presentation of the heading is graphically intense, it\n should be marked up using appropriate elements (typically h1) and then styled using\n CSS and supporting technologies such as shadow trees.\nWhen authors use the canvas element, they must also provide content that, when\n presented to the user, conveys essentially the same function or purpose as the\n canvas's bitmap. This content may be placed as content of the canvas\n element. The contents of the canvas element, if any, are the element's fallback\n content.\nIn interactive visual media, if scripting is enabled for\n the canvas element, and if support for canvas elements has been enabled,\n then the canvas element represents embedded content\n consisting of a dynamically created image, the element's bitmap.\nIn non-interactive, static, visual media, if the canvas element has been\n previously associated with a rendering context (e.g. if the page was viewed in an interactive\n visual medium and is now being printed, or if some script that ran during the page layout process\n painted on the element), then the canvas element represents\n embedded content with the element's current bitmap and size. Otherwise, the element\n represents its fallback content instead.\nIn non-visual media, and in visual media if scripting is\n disabled for the canvas element or if support for canvas elements\n has been disabled, the canvas element represents its fallback\n content instead.\nWhen a canvas element represents embedded content, the\n user can still focus descendants of the canvas element (in the fallback\n content). When an element is focused, it is the target of keyboard interaction\n events (even though the element itself is not visible). This allows authors to make an interactive\n canvas keyboard-accessible: authors should have a one-to-one mapping of interactive regions to focusable areas in the fallback content. (Focus has no\n effect on mouse interaction events.) [UIEVENTS]\nAn element whose nearest canvas element ancestor is being rendered\n and represents embedded content is an element that is being used as\n relevant canvas fallback content.\nThe canvas element has two attributes to control the size of the element's bitmap:\n width and height. These attributes,\n when specified, must have values that are valid\n non-negative integers. The rules for parsing non-negative\n integers must be used to obtain their numeric\n values. If an attribute is missing, or if parsing its value returns an error, then the\n default value must be used instead. The width\n attribute defaults to 300, and the height attribute\n defaults to 150.\nWhen setting the value of the width or height attribute, if the context mode of the canvas\n element is set to placeholder, the\n user agent must throw an \"InvalidStateError\" DOMException\n and leave the attribute's value unchanged.\nThe intrinsic dimensions of the canvas element when it\n represents embedded content are equal to the dimensions of the\n element's bitmap.\nThe user agent must use a square pixel density consisting of one pixel of image data per\n coordinate space unit for the bitmaps of a canvas and its rendering contexts.\nThe bitmaps of canvas elements, the bitmaps of ImageBitmap objects,\n as well as some of the bitmaps of rendering contexts, such as those described in the sections on\n the CanvasRenderingContext2D and ImageBitmapRenderingContext objects\n below, have an origin-clean flag, which can be\n set to true or false. Initially, when the canvas element or ImageBitmap\n object is created, its bitmap's origin-clean\n flag must be set to true.\nA canvas element can have a rendering context bound to it. Initially, it does not\n have a bound rendering context. To keep track of whether it has a rendering context or not, and\n what kind of rendering context it is, a canvas also has a canvas context mode, which is initially none but can be changed to either placeholder, 2d, bitmaprenderer, webgl, webgl2, or webgpu by algorithms defined in this specification.\nWhen its canvas context mode is none, a canvas element has no rendering context,\n and its bitmap must be transparent black with an intrinsic width equal\n to the numeric value of the element's width attribute and an intrinsic height equal to\n the numeric value of the element's height attribute, those values being interpreted in CSS pixels, and being updated as the attributes are set, changed, or\n removed.\nWhen its canvas context mode is placeholder, a canvas element has no\n rendering context. It serves as a placeholder for an OffscreenCanvas object, and\n the content of the canvas element is updated by calling the commit() method of the OffscreenCanvas\n object's rendering context.\nWhen a canvas element represents embedded content, it provides a\n paint source whose width is the element's intrinsic width, whose height\n is the element's intrinsic height, and whose appearance is the element's bitmap.\nWhenever the width and height content attributes are set, removed, changed, or\n redundantly set to the value they already have, then the user agent must perform the action\n from the row of the following table that corresponds to the canvas element's context mode.\n\n Context Mode\n \n Action\n \n \n 2d\n \n Follow the steps to set bitmap\n dimensions to the numeric values\n of the width and height content attributes.\n \n \n webgl or webgl2\n \n Follow the behavior defined in the WebGL specifications. [WEBGL]\n \n \n webgpu\n \n Follow the behavior defined in WebGPU. [WEBGPU]\n \n \n bitmaprenderer\n \n If the context's bitmap\n mode is set to blank,\n run the steps to set an ImageBitmapRenderingContext's output bitmap,\n passing the canvas element's rendering context.\n \n \n placeholder\n \n Do nothing.\n \n \n none\n \n Do nothing.\n \nThe width\n and height\n IDL attributes must reflect the respective content attributes of the same name, with\n the same defaults.\nThe getContext(contextId, options)\n method of the canvas element, when invoked, must run these steps:\n \n \nIf options is not an object, then set\n options to null.Set options to the result of converting options to a JavaScript value.\n Run the steps in the cell of the following table whose column header matches this\n canvas element's canvas context\n mode and whose row header matches contextId:\n \n \n none\n 2d\n bitmaprenderer\n webgl or webgl2\n webgpu\n placeholder\n \"2d\"\n \n Follow the 2D context creation algorithm defined in the section below, passing\n it this canvas element and options, to obtain a\n CanvasRenderingContext2D object; if this does not throw an exception, then set\n this canvas element's context\n mode to 2d, and return the\n CanvasRenderingContext2D object.\n \n Return the same object as was returned the last time the method was invoked with this same\n first argument.\n \n Return null.\n \n Return null.\n \n Return null.\n \n Throw an \"InvalidStateError\" DOMException.\n \"bitmaprenderer\"\n \n Follow the ImageBitmapRenderingContext creation algorithm defined\n in the section below, passing it this canvas element and options, to\n obtain an ImageBitmapRenderingContext object; then set this canvas\n element's context mode to bitmaprenderer, and return the\n ImageBitmapRenderingContext object.\n \n Return null.\n \n Return the same object as was returned the last time the method was invoked with this same\n first argument.\n \n Return null.\n \n Return null.\n \n Throw an \"InvalidStateError\" DOMException.\n \"webgl\" or \"webgl2\", if the user agent supports the WebGL\n feature in its current configuration\n \n Follow the instructions given in the WebGL specifications' Context Creation sections\n to obtain a WebGLRenderingContext, WebGL2RenderingContext, or\n null; if the returned value is null, then return null; otherwise, set this\n canvas element's context mode\n to webgl or webgl2, and return the\n WebGLRenderingContext or WebGL2RenderingContext object. [WEBGL]\n \n Return null.\n \n Return null.\n \n Return the same object as was returned the last time the method was invoked with this same\n first argument.\n \n Return null.\n \n Throw an \"InvalidStateError\" DOMException.\n \"webgpu\", if the user\n agent supports the WebGPU feature in its current configuration\n \n Follow the instructions given in WebGPU's Canvas Rendering section to\n obtain a GPUCanvasContext or null; if the returned value is null, then return\n null; otherwise, set this canvas element's context mode to webgpu and return the\n GPUCanvasContext object. [WEBGPU]\n \n Return null.\n \n Return null.\n \n Return null.\n \n Return the same object as was returned the last time the method was invoked with this same\n first argument.\n \n Throw an \"InvalidStateError\" DOMException.\n An unsupported value*\n \n Return null.\n \n Return null.\n \n Return null.\n \n Return null.\n \n Return null.\n \n Throw an \"InvalidStateError\" DOMException.\n \n \n * For example, the \"webgl\" or \"webgl2\" value in the case of a user agent having exhausted\n the graphics hardware's abilities and having no software fallback implementation.\n \nThe toDataURL(type, quality) method,\n when invoked, must run these steps:\nIf this canvas element's bitmap's origin-clean flag is set to false, then throw a\n \"SecurityError\" DOMException.\n \n \n If this canvas element's bitmap has no pixels (i.e. either its horizontal\n dimension or its vertical dimension is zero) then return the string \"data:,\". (This is the shortest data: URL; it represents the empty string in a text/plain resource.)Let file be a\n serialization of this canvas element's bitmap as a file, passing\n type and quality if given.If file is null then return \"data:,\".Return a data: URL representing\n file. [RFC2397]\n \n \n \nThe toBlob(callback, type,\n quality) method, when invoked, must run these steps:\nIf this canvas element's bitmap's origin-clean flag is set to false, then throw a\n \"SecurityError\" DOMException.Let result be null.If this canvas element's bitmap has pixels (i.e., neither its horizontal\n dimension nor its vertical dimension is zero), then set result to a copy of this\n canvas element's bitmap.\n \n \n Run these steps in parallel:\n \n If result is non-null, then set result to a serialization of result as a file\n with type and quality if given.\n Queue an element task on the\n canvas blob serialization task\n source given the canvas element to run these steps:\n \n If result is non-null, then set result to a new\n Blob object, created in the relevant\n Realm of this canvas element, representing result. [FILEAPI]Invoke callback with\n « result ».\n \n \nThe transferControlToOffscreen() method,\n when invoked, must run these steps:\nIf this canvas element's context\n mode is not set to none, throw an\n \"InvalidStateError\" DOMException.Let offscreenCanvas be a new OffscreenCanvas object with its\n width and height equal to the values of the width\n and height content attributes of this\n canvas element.Set the placeholder canvas\n element of offscreenCanvas to a weak reference to this canvas\n element.Set this canvas element's context\n mode to placeholder.Return offscreenCanvas.","num":"4.12.5","tag":"canvas"}]